{"version":3,"names":["appendCustomParams","customOptions","keys","baseOptions","requestOptionsKeys","options","Object","assign","params","reduce","value","key","getLayer","request","cleanUrl","url","queryFeatures","requestOptions","queryOptions","httpMethod","where","outFields","EsriJobStatusType","ReportService","constructor","this","checkingList","isRequestingTasks","jobList","sessionJobs","templateItemsCache","stateService","StateService","getService","paramCache","service","getParamCache","setParamCache","obj","initParamCache","getHelperObj","helperObj","setHelperObj","getReportTemplates","surveyItemId","hasTemplateIds","templateIds","undefined","cache","utilService","UtilService","Promise","resolve","then","support","supportFeatureReport","Error","requests","split","forEach","id","existingItem","find","item","req","getItem","getBaseRequestOptions","itemJson","catch","console","log","push","all","resp","relatedItems","relationshipType","getRelatedItems","res","error","config","typeKeyword","type","results","filter","typeKeywords","indexOf","items","printTemplates","templateUrl","getCustomPrintingFileUrl","template","name","title","summary","snippet","modified","Date","sort","a","b","getLayerJson","layerUrl","PropsService","featureLayerUrl","cacheLayerJsons","cacheLayer","layerObj","json","authentication","token","layerJson","layerJsons","getFeatureCount","queryParms","JSON","parse","queryParameters","orderByFields","returnCountOnly","objectIds","additionalParams","result","count","resultRecordCount","featureCount","notifyDataChanged","e","manageError","itemId","portalUrl","estimateReportCosts","defautlParams","f","body","URLSearchParams","k","append","apiUrl","fetch","method","headers","_generateRequestHeaders","executeReport","locale","utcOffset","_getLocalTimezoneOffset","uploadInfo","prototype","hasOwnProperty","call","createSampleReport","removeJob","jobId","cancelJob","removeJobFromList","job","jobs","targetIdx","findIndex","jobItem","splice","concat","queryJobs","forceQuery","length","sendQueryJobsRequest","jobObj","idx","curId","oldJob","_tempRuntime","errorMsg","message","queryJobTimmer","clearTimeout","setTimeout","checkJobListDetails","jobStatus","resultInfo","resultFiles","checkJobStatus","updateJobDetail","executing","submitted","isSessionJob","failed","checkJobDetails","hasDetail","succeeded","partialSucceeded","cancelled","details","downloadReport","format","inputInfo","parameters","outputFormat","downloadFile","openInNewtab","downloadUrl","startDownload","document","createElement","style","display","appendChild","setAttribute","click","remove","getErrorStr","err","detail","status","statusText","showError","html","errorStr","showDetails","response","alertType","_b","_a","code","_d","_c","i18n","TranslateService","getTranslateSync","errMsg","_e","customPrint","noItemErr","replace","oldJ","isS3File","multipleFiles","isNaN","Number","completed","urlExpired","fileUrl","size","getFileSize","findMatchedInfo","source","target","messages","success","objectId","i","stringify","failedInfo","mathchedInfo","newFailedOIDs","join","info","timezoneOffsetMin","getTimezoneOffset","offsetHrs","Math","abs","offsetMin","direction","timezoneOffset","contentType","requestSource","toLowerCase"],"sources":["node_modules/@esri/arcgis-rest-request/dist/esm/utils/append-custom-params.js","node_modules/@esri/arcgis-rest-feature-service/dist/esm/getLayer.js","node_modules/@esri/arcgis-rest-feature-service/dist/esm/query.js","src/services/report.service.ts"],"sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams(customOptions, keys, baseOptions) {\n    const requestOptionsKeys = [\n        \"params\",\n        \"httpMethod\",\n        \"rawResponse\",\n        \"authentication\",\n        \"portal\",\n        \"fetch\",\n        \"maxUrlLength\",\n        \"headers\"\n    ];\n    const options = Object.assign(Object.assign({ params: {} }, baseOptions), customOptions);\n    // merge all keys in customOptions into options.params\n    options.params = keys.reduce((value, key) => {\n        if (customOptions[key] ||\n            typeof customOptions[key] === \"boolean\" ||\n            (typeof customOptions[key] === \"number\" &&\n                customOptions[key] === 0)) {\n            value[key] = customOptions[key];\n        }\n        return value;\n    }, options.params);\n    // now remove all properties in options that don't exist in IRequestOptions\n    return requestOptionsKeys.reduce((value, key) => {\n        if (options[key]) {\n            value[key] = options[key];\n        }\n        return value;\n    }, {});\n}\n//# sourceMappingURL=append-custom-params.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\n/**\n * Layer (Feature Service) request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/layer-feature-service-.htm) for more information.\n *\n * ```js\n * import { getLayer } from '@esri/arcgis-rest-feature-service';\n * //\n * getLayer({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\"\n * })\n *   .then(response) // { name: \"311\", id: 0, ... }\n * ```\n *\n * @param options - Options for the request.\n * @returns A Promise that will resolve with the addFeatures response.\n */\nexport function getLayer(options) {\n    return request(cleanUrl(options.url), options);\n}\n//# sourceMappingURL=getLayer.js.map","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request, cleanUrl, appendCustomParams } from \"@esri/arcgis-rest-request\";\n/**\n * Get a feature by id.\n *\n * ```js\n * import { getFeature } from '@esri/arcgis-rest-feature-service';\n *\n * const url = \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Landscape_Trees/FeatureServer/0\";\n *\n * getFeature({\n *   url,\n *   id: 42\n * }).then(feature => {\n *  console.log(feature.attributes.FID); // 42\n * });\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the feature or the [response](https://developer.mozilla.org/en-US/docs/Web/API/Response) itself if `rawResponse: true` was passed in.\n */\nexport function getFeature(requestOptions) {\n    const url = `${cleanUrl(requestOptions.url)}/${requestOptions.id}`;\n    // default to a GET request\n    const options = Object.assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options).then((response) => {\n        if (options.rawResponse) {\n            return response;\n        }\n        return response.feature;\n    });\n}\n/**\n * Query a feature service. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n *\n * ```js\n * import { queryFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * queryFeatures({\n *   url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n *   where: \"STATE_NAME = 'Alaska'\"\n * })\n *   .then(result)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the query response.\n */\nexport function queryFeatures(requestOptions) {\n    const queryOptions = appendCustomParams(requestOptions, [\n        \"where\",\n        \"objectIds\",\n        \"relationParam\",\n        \"time\",\n        \"distance\",\n        \"units\",\n        \"outFields\",\n        \"geometry\",\n        \"geometryType\",\n        \"spatialRel\",\n        \"returnGeometry\",\n        \"maxAllowableOffset\",\n        \"geometryPrecision\",\n        \"inSR\",\n        \"outSR\",\n        \"gdbVersion\",\n        \"returnDistinctValues\",\n        \"returnIdsOnly\",\n        \"returnCountOnly\",\n        \"returnExtentOnly\",\n        \"orderByFields\",\n        \"groupByFieldsForStatistics\",\n        \"outStatistics\",\n        \"returnZ\",\n        \"returnM\",\n        \"multipatchOption\",\n        \"resultOffset\",\n        \"resultRecordCount\",\n        \"quantizationParameters\",\n        \"returnCentroid\",\n        \"resultType\",\n        \"historicMoment\",\n        \"returnTrueCurves\",\n        \"sqlFormat\",\n        \"returnExceededLimitFeatures\",\n        \"f\"\n    ], {\n        httpMethod: \"GET\",\n        params: Object.assign({ \n            // set default query parameters\n            where: \"1=1\", outFields: \"*\" }, requestOptions.params)\n    });\n    return request(`${cleanUrl(requestOptions.url)}/query`, queryOptions);\n}\n//# sourceMappingURL=query.js.map","\nimport { PropsService } from './props.service';\nimport { StateService } from './state.service';\nimport { UtilService } from './util.service';\nimport { getItem, getRelatedItems } from \"@esri/arcgis-rest-portal\";\nimport { queryFeatures, getLayer } from '@esri/arcgis-rest-feature-service';\nimport { TranslateService } from './translate.service';\n\n\nexport enum EsriJobStatusType {\n  submitted = 'esriJobSubmitted',\n  executing = 'esriJobExecuting',\n  succeeded = 'esriJobSucceeded',\n  partialSucceeded = 'esriJobPartialSucceeded',\n  failed = 'esriJobFailed',\n  cancelled = 'esriJobStatusCancelled'\n}\n\nexport class ReportService {\n\n  static service: ReportService;\n  public checkingList: any[] = [];  // the job id list which is not complete, should to be checked\n  public isRequestingTasks: boolean = false;\n  public jobList: any = {};\n  private queryJobTimmer: any;\n  private sessionJobs: any[] = [];  // seems this is not needed.\n  private templateItemsCache: any[] = [];\n  private stateService: StateService = StateService.getService();\n\n  // the parameters cache that will be sent to generate report\n  private paramCache: any = {\n\n  };\n\n  // some assosiate data for report, like the feature count\n  private helperObj: {\n    featureCount?: number,\n    surveyIsInvalid?: boolean,\n    canCreateItem?: boolean\n  }\n\n  /**\n   * get Service\n   * @returns \n   */\n  static getService(): ReportService {\n    if (!this.service) {\n      this.service = new ReportService();\n    }\n    return this.service;\n  }\n\n\n  /**\n   * get the report parameter cache\n   * @param key \n   */\n  public getParamCache(key?: string) {\n    if (!key) {\n      return this.paramCache;\n    }\n    return this.paramCache ? this.paramCache[key] : null;\n  }\n\n  /**\n   * set the report parameter cache\n   * @param obj \n   */\n  public setParamCache(obj: any) {\n    if (!obj) {\n      return;\n    }\n    this.paramCache = Object.assign(this.paramCache || {}, obj);\n  }\n\n  public initParamCache() {\n\n  }\n\n\n  /**\n   * get the report parameter cache\n   * @param key \n   */\n  public getHelperObj(key?: string) {\n    if (!key) {\n      return this.helperObj;\n    }\n    if (!this.helperObj) {\n      return null;\n    }\n    return this.helperObj[key];\n  }\n\n  /**\n   * set the report parameter cache\n   * @param obj \n   */\n  public setHelperObj(obj: any) {\n    if (!obj) {\n      return;\n    }\n    this.helperObj = Object.assign(this.helperObj || {}, obj);\n  }\n\n  /**\n   * getReportTemplates\n   * @param surveyItemId \n   */\n  public getReportTemplates(surveyItemId: string, options?: {\n    templateIds?: string;\n  }) {\n    options = options || {};\n    let hasTemplateIds = false;\n    if ('templateIds' in options && options.templateIds !== undefined) {\n      hasTemplateIds = true;\n    }\n    const templateIds = options?.templateIds || '';\n    const cache = this.templateItemsCache || [];\n    // TBD：\n    // if (!surveyItemId) {\n    //   return Promise.resolve([]);\n    // }  \n    \n    const utilService: UtilService = UtilService.getService();    \n    // check if the portal support survey2data relation\n    return Promise.resolve(true)\n    .then(() => {\n      const support = utilService.supportFeatureReport();\n      if (!support) {\n        throw new Error('This portal does not support custom report.');\n      }\n      return true;\n    })\n    .then(() => {\n      if (hasTemplateIds) {\n        // get all the template id item info\n        const requests = [];\n        templateIds.split(',').forEach((id) => {\n          const existingItem = cache.find((item) => {\n            return item.id === id;\n          });\n          let req = null;\n          if (existingItem) {\n            req = Promise.resolve(existingItem);\n          } else {\n            req = getItem(id, utilService.getBaseRequestOptions()).then((itemJson) => {\n              return itemJson\n            }).catch(() => {\n              console.log('Cannot get item info for the report template with id' + id);\n              return {};\n            });\n          }\n          requests.push(req);\n        });\n        return Promise.all(requests).then((resp) => {\n          return {\n            relatedItems: resp\n          };\n        })\n      } else if(surveyItemId && !this.getHelperObj('surveyIsInvalid')) {\n        const params: any = Object.assign({id: surveyItemId, relationshipType: 'Survey2Data'}, utilService.getBaseRequestOptions());\n        return getRelatedItems(params);\n      } else {\n        return {\n          relatedItems: []\n        }\n      }\n\n    })\n    .then((res: any) => {\n      if (!res || res.error) {\n        throw new Error('Failed to get related templates');\n      }\n\n      this.templateItemsCache = res.relatedItems || [];\n      const config = {\n        typeKeyword: 'Print Template',\n        type: 'Microsoft Word'\n      };\n      const results = res.relatedItems.filter((item) => {\n        // only type and typekeywords is match\n        return item.type === config.type && item.typeKeywords.indexOf(config.typeKeyword) !== -1;\n      });\n      return results || [];\n    })\n    .then((items) => {\n      const printTemplates = [];\n\n      items.forEach((item) => {\n        const templateUrl = this.getCustomPrintingFileUrl(item.id);\n        const template = {\n          id: item.id,\n          name: item.name,\n          title: item.title,\n          summary: item.snippet,\n          modified: new Date(item.modified),\n          url: templateUrl,\n          typeKeywords: item.typeKeywords,\n          type: item.type\n          // isInnerWorking: false\n        };\n        printTemplates.push(template);\n      });\n      \n      if (hasTemplateIds) {\n        printTemplates.sort((a, b) => {\n          if (a.modified < b.modified) {\n            return 1;\n          } else {\n            return -1;\n          }\n        });\n      }\n\n\n      return printTemplates;\n    });\n  }\n\n  /**\n   * get layer json\n   * @param layerUrl \n   */\n  public getLayerJson(layerUrl?: string) {\n    layerUrl = layerUrl || PropsService.featureLayerUrl\n    // read from cache\n    const cacheLayerJsons = this.getHelperObj('layerJsons') || []\n    const cacheLayer = cacheLayerJsons.find((layerObj) => {\n      return layerObj.url === layerUrl && layerObj.json;\n    })\n    if (cacheLayer) {\n      return Promise.resolve(cacheLayer.json);\n    }\n    return getLayer({\n      url: PropsService.featureLayerUrl,\n      authentication: PropsService.token\n    }).then((layerJson) => {\n      cacheLayerJsons.push({\n        url: layerUrl,\n        json: layerJson\n      });\n      this.setHelperObj({layerJsons: cacheLayerJsons});\n      return layerJson;\n    })\n  }\n\n  /**\n   * get feature count\n   * @returns \n   */\n  public getFeatureCount() {\n    const queryParms = JSON.parse(PropsService.queryParameters);\n    delete queryParms.orderByFields; // because the feature report's orderByFields is not the same with the rest api's\n    /**\n     * query features\n     */\n    const params = Object.assign({\n      url: PropsService.featureLayerUrl,\n      authentication: PropsService.token,    \n      returnCountOnly: true\n      }, queryParms);\n\n    const where = 'where' in params ? params.where : null\n    const objectIds = 'objectIds' in params ? params.objectIds: null\n    const additionalParams: any  = {\n\n    };\n    if (where !== null) {\n      additionalParams.where = where;\n    }\n    if (objectIds != null) {\n      additionalParams.objectIds = objectIds;\n    }\n    if (!objectIds && !where) {\n      additionalParams.where = '1<>1'; // if no objectIds and where, set where as '1<>1' to avoid requesting error\n      delete additionalParams.objectIds\n    }\n\n    params.params = additionalParams;\n    delete params.where;\n    delete params.objectIds;\n\n    return queryFeatures(params)\n    .then((result: any) => {\n      let count = result.count;\n      if (queryParms.resultRecordCount < count) {\n        count = queryParms.resultRecordCount\n      }\n      this.setHelperObj({\n        featureCount: count\n      });\n      this.stateService.notifyDataChanged('feature-count-updated');\n      return;\n    }).catch((e) => {\n      this.manageError(e, 'featureLayerUrl');\n  });\n}\n\n  /**\n   * get custom printing file url (e.g. word)\n   * @param itemId: String\n   * @return string\n   */\n  public getCustomPrintingFileUrl(itemId: string): string {\n    return `${PropsService.portalUrl}/sharing/rest/content/items/${itemId}/data?token=${PropsService.token}`;\n  }\n\n  /**\n   * estimate report costs  \n   * @param options\n   */\n  public estimateReportCosts(options: any) {\n    const defautlParams = {\n      portalUrl: PropsService.portalUrl,\n      token: PropsService.token,\n      f: 'json'\n    };\n    const params = Object.assign(defautlParams, options || {});\n    // if (this.isInternalTest()) {\n    //   params['isInternalTest'] = true;\n    // }\n\n    const body = new URLSearchParams();\n    Object.keys(params).forEach((k) => {\n      const value = params[k];\n      body.append(k, value);\n    });\n    const url = `${PropsService.apiUrl}/estimateCredits`;\n    return fetch(url, {\n      method: 'POST',\n      headers: this._generateRequestHeaders(),\n      body\n    })\n    .then((res) => {\n      return res.json();\n    });\n  }\n\n  /**\n   * print report\n   */\n  public executeReport(options: any) {\n    const locale = PropsService.locale || 'en';\n    const defautlParams = {\n      // outputFormat: 'docx',\n      portalUrl: PropsService.portalUrl,\n      utcOffset: '||' + this._getLocalTimezoneOffset(),\n      locale: '||' + locale,\n      token: PropsService.token,\n      f: 'json'\n    };\n    const params = Object.assign(defautlParams, options || {});\n    if ((!params.uploadInfo || params.uploadInfo === 'null') && Object.prototype.hasOwnProperty.call(params, 'uploadInfo')) {\n      delete params.uploadInfo;\n    }\n    // if (this.isInternalTest()) {\n    //   params['isInternalTest'] = true;\n    // }\n\n    const body = new URLSearchParams();\n    Object.keys(params).forEach((k) => {\n      const value = params[k];\n      body.append(k, value);\n    });\n\n    const url = `${PropsService.apiUrl}/createReport/submitJob`;\n    return fetch(url, {\n      method: 'POST',\n      headers: this._generateRequestHeaders(),\n      body\n    })\n    .then((res) => {\n      return res.json();\n    });\n  }\n\n    /**\n   * createSampleReport\n   * @param options\n   */\n    public createSampleReport(options: any) {\n      const locale = PropsService.locale || 'en';\n\n      const defautlParams = {\n        // outputFormat: 'docx',\n        portalUrl: PropsService.portalUrl,\n        utcOffset: '||' + this._getLocalTimezoneOffset(),\n        locale: '||' + locale,\n        token: PropsService.token,\n        f: 'json'\n      };\n      \n      const params = Object.assign(defautlParams, options || {});\n      const body = new URLSearchParams();\n      Object.keys(params).forEach((k) => {\n        const value = params[k];\n        body.append(k, value);\n      });\n      // if (this.isInternalTest()) {\n      //   params['isInternalTest'] = true;\n      // }\n\n      const url = `${PropsService.apiUrl}/createSampleReport/submitJob`;\n      return fetch(url, {\n        method: 'POST',\n        headers: this._generateRequestHeaders(),\n        body\n      })\n      .then((res) => {\n        return res.json();\n      });\n    }\n\n    /**\n   * remove job\n   * @param jobId \n   * @returns \n   */\n    public removeJob(jobId) {\n      const params = {\n        portalUrl: PropsService.portalUrl,\n        token: PropsService.token,\n        f: 'json'\n      };\n      // if (this.isInternalTest()) {\n      //   params['isInternalTest'] = true;\n      // }\n  \n      const body = new URLSearchParams();\n      Object.keys(params).forEach((k) => {\n        const value = params[k];\n        body.append(k, value);\n      });\n  \n      const url = `${PropsService.apiUrl}/jobs/${jobId}/remove`;\n      return fetch(url, {\n        method: 'POST',\n        headers: this._generateRequestHeaders(),\n        body\n      })\n      .then((res) => {\n        return res.json();\n      });\n\n    }\n    \n    public cancelJob(jobId) {\n      const params = {\n        portalUrl: PropsService.portalUrl,\n        token: PropsService.token,\n        f: 'json'\n      };\n      // if (this.isInternalTest()) {\n      //   params['isInternalTest'] = true;\n      // }\n  \n      const body = new URLSearchParams();\n      Object.keys(params).forEach((k) => {\n        const value = params[k];\n        body.append(k, value);\n      });\n  \n      const url = `${PropsService.apiUrl}/jobs/${jobId}/cancel`;\n      return fetch(url, {\n        method: 'POST',\n        headers: this._generateRequestHeaders(),\n        body\n      })\n      .then((res) => {\n        return res.json();\n      });\n\n    }\n\n    /**\n     * Deprecated, remove job from the job list\n     * @param job \n     * @returns \n     */\n    public removeJobFromList(job) {\n      if (!job) {\n        return;\n      }\n      // const jobId = job.jobId;\n      // // if the job is the session job, stop the check status process\n      // const isSessionJob = this.sessionJobs.indexOf(job.jobId) >= 0;\n      // if (isSessionJob) {\n      //   // delete from the sessionJobs\n      //   this.sessionJobs.splice(this.sessionJobs.indexOf(jobId), 1);\n      //   // delete the timmer\n      //   if (this.queryJobStatusTimmerList[jobId]) {\n      //     delete this.queryJobStatusTimmerList[jobId];\n      //   }\n      // }\n  \n      // remove the job from the checking\n      // this.checkingList.splice(this.checkingList.indexOf(jobId), 1);\n      // setTimeout(() => { this.checkingListChange = false; }, 1500);\n  \n      // remove the job from the jobs list\n      if (this.jobList && this.jobList.jobs) {\n        const targetIdx = this.jobList.jobs.findIndex((jobItem) => {\n          return jobItem.jobId === job.jobId;\n        })\n        this.jobList.jobs.splice(targetIdx, 1);\n        this.jobList.jobs = [].concat(this.jobList.jobs);\n      }\n  \n      // todo: query job list again (load the 11th job)  \n      // this.queryJobs(true);\n    }\n\n\n  /**\n   * query jobs\n   * @param forceQuery \n   * @returns \n   */\n  public queryJobs(forceQuery?: boolean) {\n    if (this.checkingList.length < 1 && !forceQuery) {\n      return Promise.resolve(null);\n    }\n    // if (!this.surveyId) {\n    //   setTimeout(() => { this.queryJobs(forceQuery); }, 1000);\n    //   return Promise.resolve(null);\n    // }\n    // if (this.state !== 'query' && !forceQuery) {\n    //   if (this.queryJobTimmer) {\n    //     clearTimeout(this.queryJobTimmer);\n    //   }\n    //   this.queryJobTimmer = setTimeout(() => { this.queryJobs() }, 10000);\n    //   return Promise.resolve(null);\n    // }\n    if (this.isRequestingTasks) {\n      return Promise.resolve(null);\n    }\n    this.isRequestingTasks = true;\n    return this.sendQueryJobsRequest(PropsService.surveyItemId)\n      .then((res) => {\n        if (res.error) {\n          throw res.error;\n        }\n  \n        return res;\n      })\n      .then((res) => {\n        this.isRequestingTasks = false;\n      // this.jobList = res; // todo: only add the new job\n\n      if (!this.jobList.jobs) {\n        this.jobList.jobs = [];\n      }\n      if (res && res.jobs && res.jobs.length) {\n        // add the new job to the job list\n        res.jobs.forEach((jobObj, idx) => {\n          const curId = jobObj.jobId;\n          // let isOldJob = this.jobList.jobs.find((item) => {\n          //   return item.jobId === curId;\n          // });\n          // if (!isOldJob) {\n          //   newJobs.push(jobObj);\n          // }\n          // set the old job to the new job to avoid sending the checkJobStatus request,because the new job contains the detail info which is getted from checkjobstatus\n          const oldJob = this.jobList.jobs.filter((item) => {\n            return item.jobId === curId;\n          });\n          if (oldJob && oldJob.length) {\n            res.jobs[idx] = oldJob[0];\n          }\n          // if the job contains runtime data(related to cancel job/ remove job status), keept it\n          if (oldJob && oldJob._tempRuntime) {\n            res.jobs[idx]._tempRuntime = Object.assign(oldJob._tempRuntime, res.jobs[idx]._tempRuntime || {});\n          }\n        });\n        this.jobList.jobs = res.jobs; // newJobs.concat(this.jobList.jobs);\n\n      } else if (res && res.error) {\n        const errorMsg = 'Oops! An error occurred loading the job list';\n        console.log(res.error && res.error.message ? res.error.message : errorMsg);\n        return false;\n      }\n\n      // this.checkJobListDetails();\n      if (this.queryJobTimmer) {\n        clearTimeout(this.queryJobTimmer);\n      }\n      this.queryJobTimmer = setTimeout(() => { this.queryJobs() }, 10000);\n      return this.jobList;\n    }).catch(() => {\n      this.isRequestingTasks = false;\n      console.log('query jobs failed.');\n      if (this.queryJobTimmer) {\n        clearTimeout(this.queryJobTimmer);\n      }\n      this.queryJobTimmer = setTimeout(() => { this.queryJobs() }, 10000);\n      throw new Error();\n    });\n  }\n\n  /**\n   * check all the jobs, if any job is failed, and it has no details, call the status api to get the details\n   */\n  public checkJobListDetails() {\n    const jobs = this.jobList.jobs;\n    if (!jobs || !jobs.length) {\n      return;\n    }\n    jobs.forEach((job, idx) => {\n      // request job status for succeed jobs to show the download buttons\n      if ((job.jobStatus === 'esriJobSucceeded' || job.jobStatus === 'esriJobPartialSucceeded') && (!job.resultInfo || !job.resultInfo.resultFiles)) {\n        // if the job is succeded, get the download url , and check if it contains error records\n        this.checkJobStatus(job.jobId).then((res) => {\n          this.jobList.jobs[idx] = {...this.updateJobDetail(res)};\n          this.stateService.notifyDataChanged('job-updated', {value: this.jobList.jobs[idx]});\n          this.stateService.notifyDataChanged('job-complete', {value: this.jobList.jobs[idx]});\n\n        });\n      } else if (job.jobStatus === EsriJobStatusType.executing || job.jobStatus === EsriJobStatusType.submitted) {\n        /**\n         * if the job is executing, check job status until it succeeded or failed, only one exception:\n         * if ther job is the session job, do not checkJobStatus again, \n         * because after executeCustomReport request, we has called checkJobStatus request mannually\n         */\n          const isSessionJob = this.sessionJobs.indexOf(job.jobId) >= 0;\n          if (!isSessionJob) {\n            this.checkJobStatus(job.jobId);\n            \n          }\n      } else {\n        this.jobList.jobs[idx] = {...this.updateJobDetail(this.jobList.jobs[idx])};\n        this.stateService.notifyDataChanged('job-updated', {value: this.jobList.jobs[idx]});\n        if (job.jobStatus === EsriJobStatusType.failed) {\n          this.stateService.notifyDataChanged('job-complete', {value: job});\n          \n        }\n\n      }\n      // if (!job.inputInfo) {\n      //   // if (!job.inputs && (job.jobStatus === 'esriJobFailed')) {\n\n      //   // if the job is failed, and has no detail,get the details\n      //   if (job.jobStatus === 'esriJobFailed') {\n      //     this.survey123ApiService.checkJobStatus(job.jobId).then((res) => {\n      //       let showDetail = job.showDetail;\n      //       job = res;\n      //       job.showDetail = showDetail;\n      //       this.jobList.jobs[idx] = job;\n      //     });\n      //   } else if (job.jobStatus === 'esriJobSucceeded') {\n      //     // if the job is succeded, get the download url , and check if it contains error records\n      //     this.survey123ApiService.checkJobStatus(job.jobId).then((res) => {\n      //       this.jobList.jobs[idx] = this.updateJobDetail(res);\n      //     });\n      //   }\n\n      // }\n    });\n  }\n  /**\n   * check job detail, if the job is failed, and it has no details, call the status api to get the details\n   */\n  public checkJobDetails(job: any) {\n    if (!job || job.hasDetail) {\n      return Promise.resolve(job);\n    }\n    if ([EsriJobStatusType.succeeded, EsriJobStatusType.partialSucceeded, EsriJobStatusType.failed,  EsriJobStatusType.cancelled].indexOf(job.jobStatus) >=0) {\n      this.stateService.notifyDataChanged('job-complete', {value: job});\n    }\n\n    // request job status for succeed jobs to show the download buttons\n    if ((job.jobStatus === EsriJobStatusType.succeeded || job.jobStatus === EsriJobStatusType.partialSucceeded) && (!job.resultInfo || !job.resultInfo.resultFiles)) {\n      // if the job is succeded, get the download url , and check if it contains error records\n      return this.checkJobStatus(job.jobId).then((res) => {\n        job = this.updateJobDetail(res);\n        this.stateService.notifyDataChanged('job-updated', {value: job});\n        this.stateService.notifyDataChanged('job-complete', {value: job});\n        // job = {...this.updateJobDetail(res)};\n        return job;\n      });\n    } else if (job.jobStatus ===EsriJobStatusType.failed && (!job.resultInfo || !job.resultInfo.details)) {\n      // failed task\n      return this.checkJobStatus(job.jobId).then((res) => {\n        job = this.updateJobDetail(res);\n        this.stateService.notifyDataChanged('job-updated', {value: job});\n        // job = {...this.updateJobDetail(res)};\n        return job;\n      });\n    } else if (job.jobStatus === EsriJobStatusType.executing || job.jobStatus === EsriJobStatusType.submitted) {\n      \n      this.stateService.notifyDataChanged('job-updated', {value: job});\n      /**\n       * if the job is executing, check job status until it succeeded or failed, only one exception:\n       * if ther job is the session job, do not checkJobStatus again, \n       * because after executeCustomReport request, we has called checkJobStatus request mannually\n       */\n        const isSessionJob = this.sessionJobs.indexOf(job.jobId) >= 0;\n        if (!isSessionJob) {\n          this.checkJobStatus(job.jobId).then((resp) => {\n            return this.checkJobDetails(resp);\n          });\n        }\n        return Promise.resolve(job);\n    } else {\n      // job = this.updateJobDetail(job);\n      job = {...this.updateJobDetail(job)};\n      this.stateService.notifyDataChanged('job-updated', {value:job});\n\n    }\n    return Promise.resolve(job);\n  }\n\n  /**\n   * query job list\n   */\n  public sendQueryJobsRequest(surveyItemId?) {\n    const params: any = {\n      // surveyItemId: surveyItemId,\n      portalUrl: PropsService.portalUrl,\n      f: 'json',\n      token: PropsService.token\n    };\n    if (surveyItemId) {\n      params.surveyItemId = surveyItemId;\n    }\n    const body = new URLSearchParams();\n    Object.keys(params).forEach((k) => {\n      const value = params[k];\n      body.append(k, value);\n    });\n    // if (this.isInternalTest()) {\n    //   params['isInternalTest'] = true;\n    // }\n    const url = PropsService.apiUrl + '/queryJobs';\n    return fetch(url, {\n      method: 'POST',\n      headers: this._generateRequestHeaders(),\n      body\n    })\n    .then((res) => {\n      return res.json();\n    });\n  }\n\n  /**\n   * checkJobStatus\n   */\n  public checkJobStatus(jobId: string) {\n    const params = {\n      f: 'json',\n      portalUrl: PropsService.portalUrl,\n      token: PropsService.token\n    };\n    const body = new URLSearchParams();\n    Object.keys(params).forEach((k) => {\n      const value = params[k];\n      body.append(k, value);\n    });\n    // if (this.isInternalTest()) {\n    //   params['isInternalTest'] = true;\n    // }\n    const url = `${PropsService.apiUrl}/jobs/${jobId}/status`;\n    return fetch(url, {\n      method: 'POST',\n      headers: this._generateRequestHeaders(),\n      body\n    })\n    .then((res) => {\n      return res.json();\n    });\n\n  }\n\n  public downloadReport(job) {\n    let format = 'docx';\n    if (job.inputInfo && job.inputInfo.parameters) {\n      format = job.inputInfo.parameters.outputFormat || 'docx';\n    }\n    this.downloadFile(job, format === 'pdf');\n    // delete from the sessionJobs\n    // this.sessionJobs.splice(this.sessionJobs.indexOf(jobId), 1);\n    // delete the timmer\n    // if (this.queryJobStatusTimmerList[jobId]) {\n    //   delete this.queryJobStatusTimmerList[jobId];\n    // }\n    if (job.jobStatus === 'esriJobPartialSucceeded') {\n      // this.alertService.setOption({\n      //   alertType: 'warning',\n      //   html: this.langSurveyData.customPrint.printWarningMsg\n      // }).show();\n    }\n  }\n\n  /**\n   * download file\n   * @param jobObj \n   * @param openInNewtab \n   * @returns \n   */\n  public downloadFile(jobObj, openInNewtab?) {\n    if (!jobObj || !jobObj.resultInfo || !jobObj.resultInfo.resultFiles) {\n      return;\n    }\n    const resultFiles = jobObj.resultInfo.resultFiles;\n\n    resultFiles.forEach((item, idx) => {\n      let downloadUrl = item.url;\n      if (!downloadUrl) {\n        const itemId = item.id || '';\n        downloadUrl = `${PropsService.portalUrl}/sharing/rest/content/items/${itemId}/data?`;\n        downloadUrl = downloadUrl + 'token=' + PropsService.token;\n      }\n\n      if (idx > 0) {\n        setTimeout(() => {\n          this.startDownload(downloadUrl, openInNewtab);\n        }, 3000);\n      } else {\n        this.startDownload(downloadUrl, openInNewtab);\n      }\n    });\n  }\n\n  public startDownload(url: string, openInNewtab?) {\n    const a = document.createElement('a');\n    a.style.display = 'block';\n    document.body.appendChild(a);\n    a.setAttribute('href', url);\n    if (openInNewtab) {\n      a.setAttribute('target', '_blank');\n    }\n    a.click();\n    a.remove();\n  }\n\n  public getErrorStr(err) {\n    let detail = '';\n    if (err) {\n      if (typeof err === 'string') {\n        detail = err;\n      } else if (err.error && typeof err.error === 'string') {\n        detail = err.error;\n      } else if (err.error && err.error.message) {\n        detail = err.error;\n      } else if (!detail && err.status && err.statusText) {\n        detail = err.status + ' ' + err.statusText;\n      } else if (!detail && err.status && !err.statusText) {\n        detail = 'Error code: ' + err.status;\n      }\n    }\n    return detail;\n  }\n\n\n  /**\n  * show error\n  * @param errorStr \n  */\n  public showError(err, options?: {alertType?: string; errorStr?: string; detail?: any; showDetails?: boolean}) {\n    let html = '';\n    options = options || {};\n    let detail = options.detail || '';\n    if (options.errorStr) {\n      html = options.errorStr;\n    } else {\n      /**\n       * 40x or 50x error(like 404 or 500 error)\n       * the strcuture likes: \n       * {\n       *   error: {\n       *    message: ‘Failed to fetch’,\n       *    stack: ‘’\n       *  }\n       * }\n       */\n      if (err.error && err.error.message) {\n        html = err.error.message;\n      }\n    }\n \n    if (!options.detail && options.showDetails) {\n      // if (err.error && err.error instanceof ArcGISRequestError &&  err.error.message) {\n      if (err.error.response && err.error.response.error && err.error.response.error.detail) {\n        detail = err.error.response.error.detail;\n      }\n      // }\n      if (!detail && options.errorStr && err.error && err.error.message) {\n        detail = err.error.message;\n      }\n \n    }\n    if (!html && err.message) {\n      html = err.message;\n    }\n    this.stateService.notifyDataChanged('show-error', {\n      value: {\n        alertType: options.alertType || 'danger',\n        html: html,\n        detail: detail\n      }\n    });\n  }\n\n  /**\n   * manage the error from server side\n   * @param e \n   * @param type \n   */\n  public manageError(e: any, type: string) {\n    // code: 400, item not exist\n    // code 403, has no priviliage to access the item\n      if (e.response?.error?.code === 400 || e.code === 'CONT_0001'\n        || e.response?.error?.code === 403 || e.code === 'GWM_0003'\n    ) {\n      const i18n = TranslateService.getService().getTranslateSync() || {};\n      const errMsg = i18n.customPrint?.noItemErr;\n      if (errMsg && type) {\n        throw Error(errMsg.replace('${$notFoundItemID}', type + '=' + PropsService[type]));\n      }\n    }\n    throw e;\n  }\n\n\n  /**\n   * update job detail\n   * @param res \n   * @returns \n   */\n  private updateJobDetail(res) {\n    const utilService: UtilService = UtilService.getService();\n    const job = res;\n    // if (job.jobStatus === 'esriJobSucceeded' && job.resultInfo.failedObjectIds && job.resultInfo.failedObjectIds.length > 0) {\n    //   job.hasWarnning = true;\n    // }\n    if (job && this.jobList.jobs && this.jobList.jobs.length) {\n      const oldJob = this.jobList.jobs.find((oldJ) => {\n        return oldJ.jobId === job.jobId;\n      });\n      // if the job contains runtime data(related to cancel job/ remove job status), keept it\n      if (oldJob && oldJob._tempRuntime) {\n        job._tempRuntime = Object.assign(oldJob._tempRuntime, job._tempRuntime || {});\n      }\n    }\n\n    if (!res || !res.resultInfo) {\n      return job;\n    }\n    // for succeceded job\n    if (res.resultInfo.resultFiles && res.resultInfo.resultFiles.length) {\n      let url = '';\n      const resultFiles = res.resultInfo.resultFiles;\n      // todo:check the result file source: res.inputInfo.parameters.uploadInfo? online: s3\n      let isS3File = true;\n      if (res.inputInfo && res.inputInfo.parameters && res.inputInfo.parameters.uploadInfo && res.inputInfo.parameters.uploadInfo.type === 'arcgis') {\n        isS3File = false;\n      }\n      job.multipleFiles = resultFiles.length > 1 ? true : false;\n\n      if (isS3File) {\n        if (!isNaN(Number(job.completed))) {\n          if (!job.multipleFiles) {\n            url = resultFiles[0].url;\n          }\n          if (resultFiles[0].status === 'expired') {\n            job.urlExpired = true;\n          }\n          // const seconds = this.getReportMergeConfig('s3FileRetentionTime');\n          // if (new Date().getTime() - job.completed > seconds) {\n          //   job.urlExpired = true;\n          // }\n        }\n      } else {\n        // get the url from online item\n        resultFiles.forEach((item, idx) => {\n          const itemId = item.id || '';\n          let fileUrl = `${PropsService.portalUrl}/sharing/rest/content/items/${itemId}/data?`;\n          fileUrl = fileUrl + 'token=' + PropsService.token;\n          resultFiles[idx].url = fileUrl;\n          resultFiles[idx].size = utilService.getFileSize(item.size);\n        });\n        if (!job.multipleFiles) {\n          url = resultFiles[0].url;\n        }\n      }\n      if (!job.multipleFiles) {\n        job.url = url;\n      }\n    }\n    // for failed jobs(or succeed with faild objectids), merge the same failed objectids\n    if (job.resultInfo.details) {\n      const details = job.resultInfo.details || [];\n      const findMatchedInfo = (source, target) => {\n        const status = source.status;\n        const messages = source.messages;\n        const success = source.success;\n        const objectId = source.objectId;\n        // tslint:disable-next-line:forin\n        for (const i in target) {\n          const item = target[i];\n          if (status === item.status && success === item.success && JSON.stringify(messages || []) === JSON.stringify(item.messages || []) && item.objectIds.indexOf(objectId) < 0) {\n            return item;\n          }\n        }\n        return null;\n      };\n      if (details && details.length) {\n        const failedInfo = [];\n        details.forEach((detail) => {\n          const mathchedInfo = findMatchedInfo(detail, failedInfo);\n          if (!mathchedInfo) {\n            const newFailedOIDs = (detail.objectId + '').split(',').join(', ');\n            failedInfo.push({\n              status: detail.status,\n              messages: detail.messages,\n              success: detail.success,\n              objectIds: [newFailedOIDs]\n            });\n          } else {\n            mathchedInfo.objectIds.push(detail.objectId);\n          }\n        });\n        failedInfo.forEach((info) => {\n          info.objectIds = info.objectIds.join(', ');\n\n        })\n        job.failedInfo = failedInfo;\n      }\n    }\n    job.hasDetail = true;\n    return job;\n  }\n\n  /**\n   * _getLocalTimezoneOffset\n   */\n  private _getLocalTimezoneOffset() {\n    if (PropsService.utcOffset) {\n      return PropsService.utcOffset;\n    }\n    const timezoneOffsetMin = (new Date()).getTimezoneOffset();\n    let offsetHrs: any = Math.abs(timezoneOffsetMin / 60);\n    let offsetMin: any = Math.abs(timezoneOffsetMin % 60);\n\n    if (offsetHrs < 10) {\n      offsetHrs = '0' + offsetHrs;\n    }\n\n    if (offsetMin < 10) {\n      offsetMin = '0' + offsetMin;\n    }\n\n    // Add an opposite sign to the offset\n    const direction = (timezoneOffsetMin <= 0) ? '+' : '-';\n    const timezoneOffset = direction + offsetHrs + ':' + offsetMin;\n\n    // \"±hh:mm\"\n    return timezoneOffset;\n  }\n\n  /**\n   * generate request headers\n   * @returns \n   */\n  private _generateRequestHeaders() {\n    const headers: any = {\n      'contentType': 'application/x-www-form-urlencoded'\n    };\n    if (PropsService.requestSource === undefined) {\n      headers['X-Esri-Request-Source'] = 'MapsSDKJS/WebComponent';\n\n    } else if (!PropsService.requestSource  || (PropsService.requestSource + '').toLowerCase() === 'none') {\n      // do not set the X-Esri-Request-Source header\n    } else {\n      headers['X-Esri-Request-Source'] = PropsService.requestSource;\n    }\n    return headers\n  }\n\n\n}\n"],"mappings":"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","ignoreList":[]}