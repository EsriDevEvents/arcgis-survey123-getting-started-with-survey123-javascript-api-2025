{"version":3,"names":["ArcGISTokenRequestErrorCodes","ArcGISTokenRequestError","Error","constructor","message","code","UNKNOWN_ERROR_CODE","response","url","options","super","actualProto","prototype","Object","setPrototypeOf","this","name","originalMessage","ArcGISAccessDeniedError","decodeParam","param","key","value","split","decodeURIComponent","decodeQueryString","query","length","replace","reduce","acc","entry","FIVE_MINUTES_IN_MILLISECONDS","fetchToken","requestOptions","rawResponse","request","then","token","username","params","expires","Date","portalTokenResponse","access_token","now","expires_in","ssl","refresh_token","refreshToken","refresh_token_expires_in","refreshTokenExpires","arcgisOnlineUrlRegex","isOnline","test","normalizeOnlinePortalUrl","portalUrl","getOnlineEnvironment","match","subdomain","pop","includes","isFederated","owningSystemUrl","normalizedPortalUrl","cleanUrl","normalizedOwningSystemUrl","RegExp","canUseOnlineToken","requestUrl","portalIsOnline","requestIsOnline","portalEnv","requestEnv","validateAppAccess","clientId","portal","ro","method","f","client_id","revokeToken","assign","httpMethod","auth_token","success","ArcGISRequestError","base64UrlEncode","win","window","btoa","String","fromCharCode","apply","generateCodeChallenge","codeVerifier","isSecureContext","crypto","subtle","encoder","TextEncoder","bytes","encode","digest","buffer","Uint8Array","Promise","resolve","generateRandomString","randomBytes","getRandomValues","ArcGISIdentityManager","_refreshToken","_refreshTokenExpires","_username","password","_token","_tokenExpires","tokenExpires","provider","tokenDuration","redirectUri","server","referer","federatedServers","trustedDomains","root","getServerRootUrl","_pendingTokenRequests","_user","canRefresh","beginOAuth2","expiration","popup","popupWindowFeatures","locale","style","pkce","state","stateId","stateStorageKey","localStorage","setItem","authorizeUrl","authorizeUrlParams","response_type","redirect_uri","JSON","stringify","id","originalUrl","location","href","socialLoginProviderName","autoAccountCreateForSocial","setupAuth","codeVerifierStorageKey","codeChallenge","code_challenge_method","code_challenge","encodeQueryString","reject","addEventListener","e","detail","error","errorMessage","ArcGISAuthError","once","open","dispatchEvent","CustomEvent","undefined","completeOAuth2","getItem","search","hash","parse","reportError","removeItem","opener","close","history","replaceState","createManager","oauthInfo","error_description","tokenEndpoint","code_verifier","grant_type","tokenResponse","catch","parseInt","fromParent","parentOrigin","handler","event","source","parent","data","parentMessageHandler","err","postMessage","type","manager","removeEventListener","authorize","queryParams","writeHead","Location","end","exchangeAuthorizationCode","authorizationCode","REFRESH_TOKEN_EXCHANGE_FAILED","deserialize","str","fromCredential","credential","serverInfo","hasServer","userId","destroy","fromToken","getUser","signIn","toCredential","getTime","_pendingUserRequest","authentication","getPortal","_pendingPortalRequest","_portalInfo","getUsername","user","getToken","getFreshToken","getTokenForServer","toJSON","serialize","enablePostMessageAuth","validChildOrigins","_hostHandler","createPostMessageHandler","disablePostMessageAuth","refreshCredentials","refreshWithUsernameAndPassword","refreshWithRefreshToken","TOKEN_REFRESH_FAILED","protocol","domainAndPath","domain","path","toLowerCase","join","getDomainCredentials","some","domainWithProtocol","startsWith","signOut","validOrigins","isValidOrigin","indexOf","origin","isValidType","isTokenValid","msg","existingToken","fetchAuthorizedDomains","credentials","NOT_FEDERATED","authInfo","generateTokenForServer","tokenServicesUrl","serverUrl","GENERATE_TOKEN_FOR_SERVER_FAILED","client","document","NODEJS_DEFAULT_REFERER_HEADER","updateToken","ONE_DAY_IN_MILLISECONDS","exchangeRefreshToken","newToken","newTokenExpiration","portalInfo","authorizedCrossOriginDomains","filter","d","map","featureReportCss","FeatureReportStyle0","FeatureReport","stateService","StateService","getService","reportService","ReportService","templateItemIdChanged","newVal","PropsService","setProps","templateItemId","queryParametersChanged","queryParameters","getFeatureCount","notifyDataChanged","mergeFilesChanged","mergeFiles","outputFormatChanged","outputFormat","localeChanged","localeChangeHandler","UtilService","setDir","showChanged","newValue","show","visibleConf","generateVisibleElems","setHelperObj","hideChanged","hide","inputFeatureTemplateChanged","inputFeatureTemplate","labelChanged","label","TranslateService","getTranslate","res","langTasks","customPrint","recentTasks","langCustomPrint","langCommon","common","reportTemplateIdsChanged","reportTemplateIds","updateTemplateList","requestSourceChanged","requestSource","componentWillLoad","i18nStringUpdated","emit","i18n","isOAuthCallbackpage","featureLayerUrl","html","missingRequiredParamsErr","init","portalRest","URL","redirect_url","pathname","headers","valueOf","_credentialGetted","console","utilService","subscribe","job","idx","checkingList","jobId","jobStatus","EsriJobStatusType","partialSucceeded","succeeded","_a","resultInfo","resultFiles","splice","concat","downloadReport","uploadInfo","setParamCache","getPortalInfo","canCreateItem","privileges","userInfoGetted","newLocale","getLocale","userInfo","surveyItemId","getSurveyItemInfo","surveyIsInvalid","surveyItemInfo","manageError","initParamCache","startLogin","idm","switchState","elems","result","_b","hides","ele","push","templateIds","getReportTemplates","templates","printTemplates","paramStore","getParamCache","selectedTemplateId","generateReportHander","evt","jobs","render","h","Host","display","visibleElems","fileName","outputReportName","onReportCreated","class","onClick","icon","Fragment","panelNumberTip","onGoBackClicked","slot","onCalciteAlertClose","kind","alertType","placement","scale","innerHTML","_c","height","_d","signInMsg","_e"],"sources":["node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISTokenRequestError.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISAccessDeniedError.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/decode-query-string.js","node_modules/@esri/arcgis-rest-request/dist/esm/fetch-token.js","node_modules/@esri/arcgis-rest-request/dist/esm/federation-utils.js","node_modules/@esri/arcgis-rest-request/dist/esm/validate-app-access.js","node_modules/@esri/arcgis-rest-request/dist/esm/revoke-token.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/base-64-url.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-code-challenge.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/generate-random-string.js","node_modules/@esri/arcgis-rest-request/dist/esm/ArcGISIdentityManager.js","src/components/feature-report/feature-report.scss?tag=feature-report&encapsulation=shadow","src/components/feature-report/feature-report.tsx"],"sourcesContent":["/* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * There are 5 potential error codes that might be thrown by {@linkcode ArcGISTokenRequestError}. 2 of these codes are used by both\n * {@linkcode ArcGISIdentityManager} or {@linkcode ApplicationCredentialsManager}:\n *\n * * `TOKEN_REFRESH_FAILED` when a request for an new access token fails.\n * * `UNKNOWN_ERROR_CODE` the error is unknown. More information may be available in {@linkcode ArcGISTokenRequestError.response}\n *\n * The 3 remaining error codes will only be thrown when using {@linkcode ArcGISIdentityManager}:\n *\n * * `GENERATE_TOKEN_FOR_SERVER_FAILED` when a request for a token for a specific federated server fails.\n * * `REFRESH_TOKEN_EXCHANGE_FAILED` when a request for a new refresh token fails.\n * * `NOT_FEDERATED` when the requested server isn't federated with the portal specified in {@linkcode ArcGISIdentityManager.portal}.\n */\nexport var ArcGISTokenRequestErrorCodes;\n(function (ArcGISTokenRequestErrorCodes) {\n    ArcGISTokenRequestErrorCodes[\"TOKEN_REFRESH_FAILED\"] = \"TOKEN_REFRESH_FAILED\";\n    ArcGISTokenRequestErrorCodes[\"GENERATE_TOKEN_FOR_SERVER_FAILED\"] = \"GENERATE_TOKEN_FOR_SERVER_FAILED\";\n    ArcGISTokenRequestErrorCodes[\"REFRESH_TOKEN_EXCHANGE_FAILED\"] = \"REFRESH_TOKEN_EXCHANGE_FAILED\";\n    ArcGISTokenRequestErrorCodes[\"NOT_FEDERATED\"] = \"NOT_FEDERATED\";\n    ArcGISTokenRequestErrorCodes[\"UNKNOWN_ERROR_CODE\"] = \"UNKNOWN_ERROR_CODE\";\n})(ArcGISTokenRequestErrorCodes || (ArcGISTokenRequestErrorCodes = {}));\n/**\n * This error is thrown when {@linkcode ArcGISIdentityManager} or {@linkcode ApplicationCredentialsManager} fails to refresh a token or generate a new token\n * for a request. Generally in this scenario the credentials are invalid for the request and the you should recreate the {@linkcode ApplicationCredentialsManager}\n * or prompt the user to authenticate again with {@linkcode ArcGISIdentityManager}. See {@linkcode ArcGISTokenRequestErrorCodes} for a more detailed description of\n * the possible error codes.\n *\n * ```js\n * request(someUrl, {\n *   authentication: someAuthenticationManager\n * }).catch(e => {\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     // ArcGIS REST JS could not generate an appropriate token for this request\n *     // All credentials are likely invalid and the authentication process should be restarted\n *   }\n * })\n * ```\n */\nexport class ArcGISTokenRequestError extends Error {\n    /**\n     * Create a new `ArcGISTokenRequestError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options and parameters of the request\n     */\n    constructor(message = \"UNKNOWN_ERROR\", code = ArcGISTokenRequestErrorCodes.UNKNOWN_ERROR_CODE, response, url, options) {\n        // 'Error' breaks prototype chain here\n        super(message);\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n        this.name = \"ArcGISTokenRequestError\";\n        this.message = `${code}: ${message}`;\n        this.originalMessage = message;\n        this.code = code;\n        this.response = response;\n        this.url = url;\n        this.options = options;\n    }\n}\n//# sourceMappingURL=ArcGISTokenRequestError.js.map","/* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * This error code will be thrown by the following methods when the user cancels or denies an authorization request on the OAuth 2.0\n * authorization screen.\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} when the `popup` option is `true`\n * * {@linkcode ArcGISIdentityManager.completeOAuth2}  when the `popup` option is `false`\n *\n * ```js\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * ArcGISIdentityManager.beginOAuth2({\n *   clientId: \"***\"\n *   redirectUri: \"***\",\n *   popup: true\n * }).then(authenticationManager => {\n *   console.log(\"OAuth 2.0 Successful\");\n * }).catch(e => {\n *   if(e.name === \"ArcGISAccessDeniedError\") {\n *     console.log(\"The user did not authorize your app.\")\n *   } else {\n *     console.log(\"Something else went wrong. Error:\", e);\n *   }\n * })\n * ```\n */\nexport class ArcGISAccessDeniedError extends Error {\n    /**\n     * Create a new `ArcGISAccessDeniedError`  object.\n     */\n    constructor() {\n        const message = \"The user has denied your authorization request.\";\n        super(message);\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n        this.name = \"ArcGISAccessDeniedError\";\n    }\n}\n//# sourceMappingURL=ArcGISAccessDeniedError.js.map","/* Copyright (c) 2017-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nexport function decodeParam(param) {\n    const [key, value] = param.split(\"=\");\n    return { key: decodeURIComponent(key), value: decodeURIComponent(value) };\n}\n/**\n * Decodes the passed query string as an object.\n *\n * @param query A string to be decoded.\n * @returns A decoded query param object.\n */\nexport function decodeQueryString(query) {\n    if (!query || query.length <= 0) {\n        return {};\n    }\n    return query\n        .replace(/^#/, \"\")\n        .replace(/^\\?/, \"\")\n        .split(\"&\")\n        .reduce((acc, entry) => {\n        const { key, value } = decodeParam(entry);\n        acc[key] = value;\n        return acc;\n    }, {});\n}\n//# sourceMappingURL=decode-query-string.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request } from \"./request.js\";\nconst FIVE_MINUTES_IN_MILLISECONDS = 5 * 60 * 1000;\nexport function fetchToken(url, requestOptions) {\n    const options = requestOptions;\n    // we generate a response, so we can't return the raw response\n    options.rawResponse = false;\n    return request(url, options).then((response) => {\n        // Typescript uses the \"in\" keyword to determine we have a generateToken response or an oauth token response\n        if (\"token\" in response && \"expires\" in response) {\n            return {\n                token: response.token,\n                username: requestOptions.params.username,\n                expires: new Date(response.expires)\n            };\n        }\n        const portalTokenResponse = {\n            token: response.access_token,\n            username: response.username,\n            expires: new Date(\n            // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n            // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n            Date.now() + response.expires_in * 1000 - FIVE_MINUTES_IN_MILLISECONDS),\n            ssl: response.ssl === true\n        };\n        if (response.refresh_token) {\n            portalTokenResponse.refreshToken = response.refresh_token;\n        }\n        if (response.refresh_token_expires_in) {\n            portalTokenResponse.refreshTokenExpires = new Date(\n            // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n            // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n            Date.now() +\n                response.refresh_token_expires_in * 1000 -\n                FIVE_MINUTES_IN_MILLISECONDS);\n        }\n        return portalTokenResponse;\n    });\n}\n//# sourceMappingURL=fetch-token.js.map","import { cleanUrl } from \"./utils/clean-url.js\";\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nconst arcgisOnlineUrlRegex = /^https?:\\/\\/(\\S+)\\.arcgis\\.com.+/;\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nconst arcgisOnlinePortalRegex = /^https?:\\/\\/(dev|devext|qa|qaext|www)\\.arcgis\\.com\\/sharing\\/rest+/;\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nconst arcgisOnlineOrgPortalRegex = /^https?:\\/\\/(?:[a-z0-9-]+\\.maps(dev|devext|qa|qaext)?)?.arcgis\\.com\\/sharing\\/rest/;\nexport function isOnline(url) {\n    return arcgisOnlineUrlRegex.test(url);\n}\nexport function normalizeOnlinePortalUrl(portalUrl) {\n    if (!arcgisOnlineUrlRegex.test(portalUrl)) {\n        return portalUrl;\n    }\n    switch (getOnlineEnvironment(portalUrl)) {\n        case \"dev\":\n            return \"https://devext.arcgis.com/sharing/rest\";\n        case \"qa\":\n            return \"https://qaext.arcgis.com/sharing/rest\";\n        default:\n            return \"https://www.arcgis.com/sharing/rest\";\n    }\n}\nexport function getOnlineEnvironment(url) {\n    if (!arcgisOnlineUrlRegex.test(url)) {\n        return null;\n    }\n    const match = url.match(arcgisOnlineUrlRegex);\n    const subdomain = match[1].split(\".\").pop();\n    if (subdomain.includes(\"dev\")) {\n        return \"dev\";\n    }\n    if (subdomain.includes(\"qa\")) {\n        return \"qa\";\n    }\n    return \"production\";\n}\nexport function isFederated(owningSystemUrl, portalUrl) {\n    const normalizedPortalUrl = cleanUrl(normalizeOnlinePortalUrl(portalUrl)).replace(/https?:\\/\\//, \"\");\n    const normalizedOwningSystemUrl = cleanUrl(owningSystemUrl).replace(/https?:\\/\\//, \"\");\n    return new RegExp(normalizedOwningSystemUrl, \"i\").test(normalizedPortalUrl);\n}\nexport function canUseOnlineToken(portalUrl, requestUrl) {\n    const portalIsOnline = isOnline(portalUrl);\n    const requestIsOnline = isOnline(requestUrl);\n    const portalEnv = getOnlineEnvironment(portalUrl);\n    const requestEnv = getOnlineEnvironment(requestUrl);\n    if (portalIsOnline && requestIsOnline && portalEnv === requestEnv) {\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=federation-utils.js.map","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request } from \"./request.js\";\n/**\n * Validates that the user has access to the application\n * and if they user should be presented a \"View Only\" mode\n *\n * This is only needed/valid for Esri applications that are \"licensed\"\n * and shipped in ArcGIS Online or ArcGIS Enterprise. Most custom applications\n * should not need or use this.\n *\n * ```js\n * import { validateAppAccess } from '@esri/arcgis-rest-request';\n *\n * return validateAppAccess('your-token', 'theClientId')\n * .then((result) => {\n *    if (!result.value) {\n *      // redirect or show some other ui\n *    } else {\n *      if (result.viewOnlyUserTypeApp) {\n *        // use this to inform your app to show a \"View Only\" mode\n *      }\n *    }\n * })\n * .catch((err) => {\n *  // two possible errors\n *  // invalid clientId: {\"error\":{\"code\":400,\"messageCode\":\"GWM_0007\",\"message\":\"Invalid request\",\"details\":[]}}\n *  // invalid token: {\"error\":{\"code\":498,\"message\":\"Invalid token.\",\"details\":[]}}\n * })\n * ```\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token platform token\n * @param clientId application client id\n * @param portal Optional\n */\nexport function validateAppAccess(token, clientId, portal = \"https://www.arcgis.com/sharing/rest\") {\n    const url = `${portal}/oauth2/validateAppAccess`;\n    const ro = {\n        method: \"POST\",\n        params: {\n            f: \"json\",\n            client_id: clientId,\n            token\n        }\n    };\n    return request(url, ro);\n}\n//# sourceMappingURL=validate-app-access.js.map","import { request, cleanUrl, ArcGISRequestError } from \"./index.js\";\n/**\n * Revokes a token generated via any oAuth 2.0 method. `token` can be either a refresh token OR an access token. If you are using  {@linkcode ArcGISIdentityManager} you should use  {@linkcode ArcGISIdentityManager.destroy} instead. Cannot revoke API keys or tokens generated by {@linkcode ApplicationCredentialsManager}.\n *\n * See [`revokeToken`](https://developers.arcgis.com/rest/users-groups-and-items/revoke-token.htm) on the ArcGIS REST API for more details.\n */\nexport function revokeToken(requestOptions) {\n    const url = `${cleanUrl(requestOptions.portal || \"https://www.arcgis.com/sharing/rest\")}/oauth2/revokeToken/`;\n    const token = requestOptions.token;\n    const clientId = requestOptions.clientId;\n    delete requestOptions.portal;\n    delete requestOptions.clientId;\n    delete requestOptions.token;\n    const options = Object.assign(Object.assign({}, requestOptions), { httpMethod: \"POST\", params: {\n            client_id: clientId,\n            auth_token: token\n        } });\n    return request(url, options).then((response) => {\n        if (!response.success) {\n            throw new ArcGISRequestError(\"Unable to revoke token\", 500, response, url, options);\n        }\n        return response;\n    });\n}\n//# sourceMappingURL=revoke-token.js.map","/**\n * Encodes a `Uint8Array` to base 64. Used internally for hashing the `code_verifier` and `code_challenge` for PKCE.\n */\nexport function base64UrlEncode(value, win = window) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n        win = window;\n    }\n    return win\n        .btoa(String.fromCharCode.apply(null, value))\n        .replace(/\\+/g, \"-\") // replace + with -\n        .replace(/\\//g, \"_\") // replace / with _\n        .replace(/=+$/, \"\"); // trim trailing =\n}\n//# sourceMappingURL=base-64-url.js.map","import { base64UrlEncode } from \"./base-64-url.js\";\n/**\n * Utility to hash the codeVerifier using sha256\n */\nexport function generateCodeChallenge(codeVerifier, win = window) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n        win = window;\n    }\n    if (codeVerifier && win.isSecureContext && win.crypto && win.crypto.subtle) {\n        const encoder = new win.TextEncoder();\n        const bytes = encoder.encode(codeVerifier);\n        return win.crypto.subtle\n            .digest(\"SHA-256\", bytes)\n            .then((buffer) => base64UrlEncode(new Uint8Array(buffer), win));\n    }\n    return Promise.resolve(null);\n}\n//# sourceMappingURL=generate-code-challenge.js.map","import { base64UrlEncode } from \"./base-64-url.js\";\n/**\n * Utility to generate a random string to use as our `code_verifier`\n *\n * @param win the global `window` object for accepting a mock while testing.\n */\nexport function generateRandomString(win) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n        win = window;\n    }\n    const randomBytes = win.crypto.getRandomValues(new Uint8Array(32));\n    return base64UrlEncode(randomBytes);\n}\n//# sourceMappingURL=generate-random-string.js.map","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { ArcGISAuthError, request } from \"./request.js\";\nimport { decodeQueryString } from \"./utils/decode-query-string.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { fetchToken } from \"./fetch-token.js\";\nimport { canUseOnlineToken, isFederated } from \"./federation-utils.js\";\nimport { validateAppAccess } from \"./validate-app-access.js\";\nimport { cleanUrl } from \"./utils/clean-url.js\";\nimport { revokeToken } from \"./revoke-token.js\";\nimport { generateCodeChallenge } from \"./utils/generate-code-challenge.js\";\nimport { generateRandomString } from \"./utils/generate-random-string.js\";\nimport { ArcGISAccessDeniedError } from \"./utils/ArcGISAccessDeniedError.js\";\nimport { ArcGISTokenRequestError, ArcGISTokenRequestErrorCodes } from \"./utils/ArcGISTokenRequestError.js\";\nimport { NODEJS_DEFAULT_REFERER_HEADER } from \"./index.js\";\n/**\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `ArcGISIdentityManager` includes helper methods for [OAuth 2.0](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/oauth-2.0/) in both browser and server applications.\n *\n * **It is not recommended to construct `ArcGISIdentityManager` directly**. Instead there are several static methods used for specific workflows. The 2 primary workflows relate to oAuth 2.0:\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} and {@linkcode ArcGISIdentityManager.completeOAuth2()} for oAuth 2.0 in browser-only environment.\n * * {@linkcode ArcGISIdentityManager.authorize} and {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode} for oAuth 2.0 for server-enabled application.\n *\n * Other more specialized helpers for less common workflows also exist:\n *\n * * {@linkcode ArcGISIdentityManager.fromToken} for when you have an existing token from another source and would like create an `ArcGISIdentityManager` instance.\n * * {@linkcode ArcGISIdentityManager.fromCredential} for creating  an `ArcGISIdentityManager` instance from a `Credentials` object in the ArcGIS JS API `IdentityManager`\n * * {@linkcode ArcGISIdentityManager.signIn} for authenticating directly with a user's username and password for environments with a user interface for oAuth 2.0.\n *\n * Once a manager is created there are additional utilities:\n *\n * * {@linkcode ArcGISIdentityManager.serialize} can be used to create a JSON object representing an instance of `ArcGISIdentityManager`\n * * {@linkcode ArcGISIdentityManager.deserialize} will create a new `ArcGISIdentityManager` from a JSON object created with {@linkcode ArcGISIdentityManager.serialize}\n * * {@linkcode ArcGISIdentityManager.destroy} or {@linkcode ArcGISIdentityManager.signOut} will invalidate any tokens in use by the  `ArcGISIdentityManager`.\n */\nexport class ArcGISIdentityManager {\n    constructor(options) {\n        this.clientId = options.clientId;\n        this._refreshToken = options.refreshToken;\n        this._refreshTokenExpires = options.refreshTokenExpires;\n        this._username = options.username;\n        this.password = options.password;\n        this._token = options.token;\n        this._tokenExpires = options.tokenExpires;\n        this.portal = options.portal\n            ? cleanUrl(options.portal)\n            : \"https://www.arcgis.com/sharing/rest\";\n        this.ssl = options.ssl;\n        this.provider = options.provider || \"arcgis\";\n        this.tokenDuration = options.tokenDuration || 20160;\n        this.redirectUri = options.redirectUri;\n        this.server = options.server;\n        this.referer = options.referer;\n        this.federatedServers = {};\n        this.trustedDomains = [];\n        // if a non-federated server was passed explicitly, it should be trusted.\n        if (options.server) {\n            // if the url includes more than '/arcgis/', trim the rest\n            const root = this.getServerRootUrl(options.server);\n            this.federatedServers[root] = {\n                token: options.token,\n                expires: options.tokenExpires\n            };\n        }\n        this._pendingTokenRequests = {};\n    }\n    /**\n     * The current ArcGIS Online or ArcGIS Enterprise `token`.\n     */\n    get token() {\n        return this._token;\n    }\n    /**\n     * The expiration time of the current `token`.\n     */\n    get tokenExpires() {\n        return this._tokenExpires;\n    }\n    /**\n     * The current token to ArcGIS Online or ArcGIS Enterprise.\n     */\n    get refreshToken() {\n        return this._refreshToken;\n    }\n    /**\n     * The expiration time of the current `refreshToken`.\n     */\n    get refreshTokenExpires() {\n        return this._refreshTokenExpires;\n    }\n    /**\n     * The currently authenticated user.\n     */\n    get username() {\n        if (this._username) {\n            return this._username;\n        }\n        if (this._user && this._user.username) {\n            return this._user.username;\n        }\n    }\n    /**\n     * Returns `true` if these credentials can be refreshed and `false` if it cannot.\n     */\n    get canRefresh() {\n        if (this.username && this.password) {\n            return true;\n        }\n        if (this.clientId && this.refreshToken && this.redirectUri) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the authentication window will open in a new tab/window. Otherwise, the user will be redirected to the authorization page in their current tab/window and the function will return `undefined`.\n     *\n     * If `popup` is `true` (the default) this method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance and you must call {@linkcode ArcGISIdentityManager.completeOAuth2()} on the page defined in the `redirectUri`. Otherwise it will return undefined and the {@linkcode ArcGISIdentityManager.completeOAuth2()} method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance.\n     *\n     * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n     *\n     * @browserOnly\n     */\n    static beginOAuth2(options, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        const { portal, provider, clientId, expiration, redirectUri, popup, popupWindowFeatures, locale, params, style, pkce, state } = Object.assign({\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            provider: \"arcgis\",\n            expiration: 20160,\n            popup: true,\n            popupWindowFeatures: \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\",\n            locale: \"\",\n            style: \"\",\n            pkce: true\n        }, options);\n        /**\n         * Generate a  random string for the `state` param and store it in local storage. This is used\n         * to validate that all parts of the oAuth process were performed on the same client.\n         */\n        const stateId = state || generateRandomString(win);\n        const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n        win.localStorage.setItem(stateStorageKey, stateId);\n        // Start setting up the URL to the authorization screen.\n        let authorizeUrl = `${cleanUrl(portal)}/oauth2/authorize`;\n        const authorizeUrlParams = {\n            client_id: clientId,\n            response_type: pkce ? \"code\" : \"token\",\n            expiration: expiration,\n            redirect_uri: redirectUri,\n            state: JSON.stringify({\n                id: stateId,\n                originalUrl: win.location.href // this is used to reset the URL back the original URL upon return\n            }),\n            locale: locale,\n            style: style\n        };\n        // If we are authorizing through a specific social provider update the params and base URL.\n        if (provider !== \"arcgis\") {\n            authorizeUrl = `${cleanUrl(portal)}/oauth2/social/authorize`;\n            authorizeUrlParams.socialLoginProviderName = provider;\n            authorizeUrlParams.autoAccountCreateForSocial = true;\n        }\n        /**\n         * set a value that will be set to a promise which will later resolve when we are ready\n         * to send users to the authorization page.\n         */\n        let setupAuth;\n        if (pkce) {\n            /**\n             * If we are authenticating with PKCE we need to generate the code challenge which is\n             * async so we generate the code challenge and assign the resulting Promise to `setupAuth`\n             */\n            const codeVerifier = generateRandomString(win);\n            const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n            win.localStorage.setItem(codeVerifierStorageKey, codeVerifier);\n            setupAuth = generateCodeChallenge(codeVerifier, win).then(function (codeChallenge) {\n                authorizeUrlParams.code_challenge_method = codeChallenge\n                    ? \"S256\"\n                    : \"plain\";\n                authorizeUrlParams.code_challenge = codeChallenge\n                    ? codeChallenge\n                    : codeVerifier;\n            });\n        }\n        else {\n            /**\n             * If we aren't authenticating with PKCE we can just assign a resolved promise to `setupAuth`\n             */\n            setupAuth = Promise.resolve();\n        }\n        /**\n         * Once we are done setting up with (for PKCE) we can start the auth process.\n         */\n        return setupAuth.then(() => {\n            // combine the authorize URL and params\n            authorizeUrl = `${authorizeUrl}?${encodeQueryString(authorizeUrlParams)}`;\n            // append additional params passed by the user\n            if (params) {\n                authorizeUrl = `${authorizeUrl}&${encodeQueryString(params)}`;\n            }\n            if (popup) {\n                // If we are authenticating a popup we need to return a Promise that will resolve to an ArcGISIdentityManager later.\n                return new Promise((resolve, reject) => {\n                    // Add an event listener to listen for when a user calls `ArcGISIdentityManager.completeOAuth2()` in the popup.\n                    win.addEventListener(`arcgis-rest-js-popup-auth-${clientId}`, (e) => {\n                        if (e.detail.error === \"access_denied\") {\n                            const error = new ArcGISAccessDeniedError();\n                            reject(error);\n                            return error;\n                        }\n                        if (e.detail.errorMessage) {\n                            const error = new ArcGISAuthError(e.detail.errorMessage, e.detail.error);\n                            reject(error);\n                            return error;\n                        }\n                        resolve(new ArcGISIdentityManager({\n                            clientId,\n                            portal,\n                            ssl: e.detail.ssl,\n                            token: e.detail.token,\n                            tokenExpires: e.detail.expires,\n                            username: e.detail.username,\n                            refreshToken: e.detail.refreshToken,\n                            refreshTokenExpires: e.detail.refreshTokenExpires,\n                            redirectUri\n                        }));\n                    }, {\n                        once: true\n                    });\n                    // open the popup\n                    win.open(authorizeUrl, \"oauth-window\", popupWindowFeatures);\n                    win.dispatchEvent(new CustomEvent(\"arcgis-rest-js-popup-auth-start\"));\n                });\n            }\n            else {\n                // If we aren't authenticating with a popup just send the user to the authorization page.\n                win.location.href = authorizeUrl;\n                return undefined;\n            }\n        });\n    }\n    /**\n     * Completes a browser-based OAuth 2.0 sign in. If `options.popup` is `true` the user\n     * will be returned to the previous window and the popup will close. Otherwise a new `ArcGISIdentityManager` will be returned. You must pass the same values for `clientId`, `popup`, `portal`, and `pkce` as you used in `beginOAuth2()`.\n     *\n     * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n     * @browserOnly\n     */\n    static completeOAuth2(options, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        // pull out necessary options\n        const { portal, clientId, popup, pkce, redirectUri } = Object.assign({\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            popup: true,\n            pkce: true\n        }, options);\n        // pull the saved state id out of local storage\n        const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n        const stateId = win.localStorage.getItem(stateStorageKey);\n        // get the params provided by the server and compare the server state with the client saved state\n        const params = decodeQueryString(pkce\n            ? win.location.search.replace(/^\\?/, \"\")\n            : win.location.hash.replace(/^#/, \"\"));\n        const state = params && params.state ? JSON.parse(params.state) : undefined;\n        function reportError(errorMessage, error, originalUrl) {\n            win.localStorage.removeItem(stateStorageKey);\n            if (popup && win.opener) {\n                win.opener.dispatchEvent(new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n                    detail: {\n                        error,\n                        errorMessage\n                    }\n                }));\n                win.close();\n                return;\n            }\n            if (originalUrl) {\n                win.history.replaceState(win.history.state, \"\", originalUrl);\n            }\n            if (error === \"access_denied\") {\n                return Promise.reject(new ArcGISAccessDeniedError());\n            }\n            return Promise.reject(new ArcGISAuthError(errorMessage, error));\n        }\n        // create a function to create the final ArcGISIdentityManager from the token info.\n        function createManager(oauthInfo, originalUrl) {\n            win.localStorage.removeItem(stateStorageKey);\n            if (popup && win.opener) {\n                win.opener.dispatchEvent(new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n                    detail: Object.assign({}, oauthInfo)\n                }));\n                win.close();\n                return;\n            }\n            win.history.replaceState(win.history.state, \"\", originalUrl);\n            return new ArcGISIdentityManager({\n                clientId,\n                portal,\n                ssl: oauthInfo.ssl,\n                token: oauthInfo.token,\n                tokenExpires: oauthInfo.expires,\n                username: oauthInfo.username,\n                refreshToken: oauthInfo.refreshToken,\n                refreshTokenExpires: oauthInfo.refreshTokenExpires,\n                // At 4.0.0 it was possible (in JS code) to not pass redirectUri and fallback to win.location.href, however this broke support for redirect URIs with query params.\n                // Now similar to 3.x.x you must pass the redirectUri parameter explicitly. See https://github.com/Esri/arcgis-rest-js/issues/995\n                redirectUri: redirectUri ||\n                    /* istanbul ignore next: TypeScript wont compile if we omit redirectUri */ location.href.replace(location.search, \"\")\n            });\n        }\n        if (!stateId || !state) {\n            return reportError(\"No authentication state was found, call `ArcGISIdentityManager.beginOAuth2(...)` to start the authentication process.\", \"no-auth-state\");\n        }\n        if (state.id !== stateId) {\n            return reportError(\"Saved client state did not match server sent state.\", \"mismatched-auth-state\");\n        }\n        if (params.error) {\n            const error = params.error;\n            const errorMessage = params.error_description || \"Unknown error\";\n            return reportError(errorMessage, error, state.originalUrl);\n        }\n        /**\n         * If we are using PKCE the authorization code will be in the query params.\n         * For implicit grants the token will be in the hash.\n         */\n        if (pkce && params.code) {\n            const tokenEndpoint = cleanUrl(`${portal}/oauth2/token/`);\n            const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n            const codeVerifier = win.localStorage.getItem(codeVerifierStorageKey);\n            win.localStorage.removeItem(codeVerifierStorageKey);\n            // exchange our auth code for a token + refresh token\n            return fetchToken(tokenEndpoint, {\n                httpMethod: \"POST\",\n                params: {\n                    client_id: clientId,\n                    code_verifier: codeVerifier,\n                    grant_type: \"authorization_code\",\n                    // using location.href here does not support query params but shipped with 4.0.0. See https://github.com/Esri/arcgis-rest-js/issues/995\n                    redirect_uri: redirectUri || location.href.replace(location.search, \"\"),\n                    code: params.code\n                }\n            })\n                .then((tokenResponse) => {\n                return createManager(Object.assign(Object.assign({}, tokenResponse), state), state.originalUrl);\n            })\n                .catch((e) => {\n                return reportError(e.originalMessage, e.code, state.originalUrl);\n            });\n        }\n        if (!pkce && params.access_token) {\n            return Promise.resolve(createManager(Object.assign({ token: params.access_token, expires: new Date(Date.now() + parseInt(params.expires_in, 10) * 1000), ssl: params.ssl === \"true\", username: params.username }, state), state.originalUrl));\n        }\n        return reportError(\"Unknown error\", \"oauth-error\", state.originalUrl);\n    }\n    /**\n     * Request credentials information from the parent application\n     *\n     * When an application is embedded into another application via an IFrame, the embedded app can\n     * use `window.postMessage` to request credentials from the host application. This function wraps\n     * that behavior.\n     *\n     * The ArcGIS API for Javascript has this built into the Identity Manager as of the 4.19 release.\n     *\n     * Note: The parent application will not respond if the embedded app's origin is not:\n     * - the same origin as the parent or *.arcgis.com (JSAPI)\n     * - in the list of valid child origins (REST-JS)\n     *\n     *\n     * @param parentOrigin origin of the parent frame. Passed into the embedded application as `parentOrigin` query param\n     * @browserOnly\n     */\n    static fromParent(parentOrigin, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        // Declare handler outside of promise scope so we can detach it\n        let handler;\n        // return a promise that will resolve when the handler receives\n        // session information from the correct origin\n        return new Promise((resolve, reject) => {\n            // create an event handler that just wraps the parentMessageHandler\n            handler = (event) => {\n                // ensure we only listen to events from the parent\n                if (event.source === win.parent && event.data) {\n                    try {\n                        return resolve(ArcGISIdentityManager.parentMessageHandler(event));\n                    }\n                    catch (err) {\n                        return reject(err);\n                    }\n                }\n            };\n            // add listener\n            win.addEventListener(\"message\", handler, false);\n            win.parent.postMessage({ type: \"arcgis:auth:requestCredential\" }, parentOrigin);\n        }).then((manager) => {\n            win.removeEventListener(\"message\", handler, false);\n            return manager;\n        });\n    }\n    /**\n     * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n     * the ArcGIS Online or ArcGIS Enterprise authorization page.\n     *\n     * @nodeOnly\n     */\n    static authorize(options, response) {\n        const { portal, clientId, expiration, redirectUri, state } = Object.assign({ portal: \"https://arcgis.com/sharing/rest\", expiration: 20160 }, options);\n        const queryParams = {\n            client_id: clientId,\n            expiration,\n            response_type: \"code\",\n            redirect_uri: redirectUri\n        };\n        if (state) {\n            queryParams.state = state;\n        }\n        const url = `${portal}/oauth2/authorize?${encodeQueryString(queryParams)}`;\n        response.writeHead(301, {\n            Location: url\n        });\n        response.end();\n    }\n    /**\n     * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n     * for a `access_token`.\n     *\n     * @nodeOnly\n     */\n    static exchangeAuthorizationCode(options, authorizationCode) {\n        const { portal, clientId, redirectUri } = Object.assign({\n            portal: \"https://www.arcgis.com/sharing/rest\"\n        }, options);\n        return fetchToken(`${portal}/oauth2/token`, {\n            params: {\n                grant_type: \"authorization_code\",\n                client_id: clientId,\n                redirect_uri: redirectUri,\n                code: authorizationCode\n            }\n        })\n            .then((response) => {\n            return new ArcGISIdentityManager({\n                clientId,\n                portal,\n                ssl: response.ssl,\n                redirectUri,\n                refreshToken: response.refreshToken,\n                refreshTokenExpires: response.refreshTokenExpires,\n                token: response.token,\n                tokenExpires: response.expires,\n                username: response.username\n            });\n        })\n            .catch((e) => {\n            throw new ArcGISTokenRequestError(e.message, ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED, e.response, e.url, e.options);\n        });\n    }\n    static deserialize(str) {\n        const options = JSON.parse(str);\n        return new ArcGISIdentityManager({\n            clientId: options.clientId,\n            refreshToken: options.refreshToken,\n            refreshTokenExpires: options.refreshTokenExpires\n                ? new Date(options.refreshTokenExpires)\n                : undefined,\n            username: options.username,\n            password: options.password,\n            token: options.token,\n            tokenExpires: options.tokenExpires\n                ? new Date(options.tokenExpires)\n                : undefined,\n            portal: options.portal,\n            ssl: options.ssl,\n            tokenDuration: options.tokenDuration,\n            redirectUri: options.redirectUri,\n            server: options.server\n        });\n    }\n    /**\n     * Translates authentication from the format used in the [`IdentityManager` class in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html).\n     *\n     * You will need to call both [`IdentityManger.findCredential`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findCredential) and [`IdentityManger.findServerInfo`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findServerInfo) to obtain both parameters for this method.\n     *\n     * This method can be used with {@linkcode ArcGISIdentityManager.toCredential} to interop with the ArcGIS API for JavaScript.\n     *\n     * ```js\n     * require([\"esri/id\"], (esriId) => {\n     *   const credential = esriId.findCredential(\"https://www.arcgis.com/sharing/rest\");\n     *   const serverInfo = esriId.findServerInfo(\"https://www.arcgis.com/sharing/rest\");\n     *\n     *   const manager = ArcGISIdentityManager.fromCredential(credential, serverInfo);\n     * });\n     * ```\n     *\n     * @returns ArcGISIdentityManager\n     */\n    static fromCredential(credential, serverInfo) {\n        // At ArcGIS Online 9.1, credentials no longer include the ssl and expires properties\n        // Here, we provide default values for them to cover this condition\n        const ssl = typeof credential.ssl !== \"undefined\" ? credential.ssl : true;\n        const expires = credential.expires || Date.now() + 7200000; /* 2 hours */\n        if (serverInfo.hasServer) {\n            return new ArcGISIdentityManager({\n                server: credential.server,\n                ssl,\n                token: credential.token,\n                username: credential.userId,\n                tokenExpires: new Date(expires)\n            });\n        }\n        return new ArcGISIdentityManager({\n            portal: cleanUrl(credential.server.includes(\"sharing/rest\")\n                ? credential.server\n                : credential.server + `/sharing/rest`),\n            ssl,\n            token: credential.token,\n            username: credential.userId,\n            tokenExpires: new Date(expires)\n        });\n    }\n    /**\n     * Handle the response from the parent\n     * @param event DOM Event\n     */\n    static parentMessageHandler(event) {\n        if (event.data.type === \"arcgis:auth:credential\") {\n            return new ArcGISIdentityManager(event.data.credential);\n        }\n        if (event.data.type === \"arcgis:auth:error\") {\n            const err = new Error(event.data.error.message);\n            err.name = event.data.error.name;\n            throw err;\n        }\n        else {\n            throw new Error(\"Unknown message type.\");\n        }\n    }\n    /**\n     * Revokes all active tokens for a provided {@linkcode ArcGISIdentityManager}. The can be considered the equivalent to signing the user out of your application.\n     */\n    static destroy(manager) {\n        return revokeToken({\n            clientId: manager.clientId,\n            portal: manager.portal,\n            token: manager.refreshToken || manager.token\n        });\n    }\n    /**\n     * Create a  {@linkcode ArcGISIdentityManager} from an existing token. Useful for when you have a users token from a different authentication system and want to get a  {@linkcode ArcGISIdentityManager}.\n     */\n    static fromToken(options) {\n        const manager = new ArcGISIdentityManager(options);\n        return manager.getUser().then(() => {\n            return manager;\n        });\n    }\n    /**\n     * Initialize a {@linkcode ArcGISIdentityManager} with a user's `username` and `password`. **This method is intended ONLY for applications without a user interface such as CLI tools.**.\n     *\n     * If possible you should use {@linkcode ArcGISIdentityManager.beginOAuth2} to authenticate users in a browser or {@linkcode ArcGISIdentityManager.authorize} for authenticating users with a web server.\n     */\n    static signIn(options) {\n        const manager = new ArcGISIdentityManager(options);\n        return manager.getUser().then(() => {\n            return manager;\n        });\n    }\n    /**\n     * Returns authentication in a format useable in the [`IdentityManager.registerToken()` method in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#registerToken).\n     *\n     * This method can be used with {@linkcode ArcGISIdentityManager.fromCredential} to interop with the ArcGIS API for JavaScript.\n     *\n     * ```js\n     * require([\"esri/id\"], (esriId) => {\n     *   esriId.registerToken(manager.toCredential());\n     * })\n     \n     * ```\n     *\n     * @returns ICredential\n     */\n    toCredential() {\n        return {\n            expires: this.tokenExpires.getTime(),\n            server: this.server || this.portal,\n            ssl: this.ssl,\n            token: this.token,\n            userId: this.username\n        };\n    }\n    /**\n     * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n     *\n     * ```js\n     * manager.getUser()\n     *   .then(response => {\n     *     console.log(response.role); // \"org_admin\"\n     *   })\n     * ```\n     *\n     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n     * @returns A Promise that will resolve with the data from the response.\n     */\n    getUser(requestOptions) {\n        if (this._pendingUserRequest) {\n            return this._pendingUserRequest;\n        }\n        else if (this._user) {\n            return Promise.resolve(this._user);\n        }\n        else {\n            const url = `${this.portal}/community/self`;\n            const options = Object.assign(Object.assign({ httpMethod: \"GET\", authentication: this }, requestOptions), { rawResponse: false });\n            this._pendingUserRequest = request(url, options).then((response) => {\n                this._user = response;\n                this._pendingUserRequest = null;\n                return response;\n            });\n            return this._pendingUserRequest;\n        }\n    }\n    /**\n     * Returns information about the currently logged in user's [portal](https://developers.arcgis.com/rest/users-groups-and-items/portal-self.htm). Subsequent calls will *not* result in additional web traffic.\n     *\n     * ```js\n     * manager.getPortal()\n     *   .then(response => {\n     *     console.log(portal.name); // \"City of ...\"\n     *   })\n     * ```\n     *\n     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n     * @returns A Promise that will resolve with the data from the response.\n     */\n    getPortal(requestOptions) {\n        if (this._pendingPortalRequest) {\n            return this._pendingPortalRequest;\n        }\n        else if (this._portalInfo) {\n            return Promise.resolve(this._portalInfo);\n        }\n        else {\n            const url = `${this.portal}/portals/self`;\n            const options = Object.assign(Object.assign({ httpMethod: \"GET\", authentication: this }, requestOptions), { rawResponse: false });\n            this._pendingPortalRequest = request(url, options).then((response) => {\n                this._portalInfo = response;\n                this._pendingPortalRequest = null;\n                return response;\n            });\n            return this._pendingPortalRequest;\n        }\n    }\n    /**\n     * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n     *\n     * ```js\n     * manager.getUsername()\n     *   .then(response => {\n     *     console.log(response); // \"casey_jones\"\n     *   })\n     * ```\n     */\n    getUsername() {\n        if (this.username) {\n            return Promise.resolve(this.username);\n        }\n        else {\n            return this.getUser().then((user) => {\n                return user.username;\n            });\n        }\n    }\n    /**\n     * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n     * the request is to an ArcGIS Online domain `token` will be used. If the request\n     * is to the current `portal` the current `token` will also be used. However if\n     * the request is to an unknown server we will validate the server with a request\n     * to our current `portal`.\n     */\n    getToken(url, requestOptions) {\n        if (canUseOnlineToken(this.portal, url)) {\n            return this.getFreshToken(requestOptions);\n        }\n        else if (new RegExp(this.portal, \"i\").test(url)) {\n            return this.getFreshToken(requestOptions);\n        }\n        else {\n            return this.getTokenForServer(url, requestOptions);\n        }\n    }\n    /**\n     * Get application access information for the current user\n     * see `validateAppAccess` function for details\n     *\n     * @param clientId application client id\n     */\n    validateAppAccess(clientId) {\n        return this.getToken(this.portal).then((token) => {\n            return validateAppAccess(token, clientId);\n        });\n    }\n    toJSON() {\n        return {\n            clientId: this.clientId,\n            refreshToken: this.refreshToken,\n            refreshTokenExpires: this.refreshTokenExpires || undefined,\n            username: this.username,\n            password: this.password,\n            token: this.token,\n            tokenExpires: this.tokenExpires || undefined,\n            portal: this.portal,\n            ssl: this.ssl,\n            tokenDuration: this.tokenDuration,\n            redirectUri: this.redirectUri,\n            server: this.server\n        };\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    /**\n     * For a \"Host\" app that embeds other platform apps via iframes, after authenticating the user\n     * and creating a ArcGISIdentityManager, the app can then enable \"post message\" style authentication by calling\n     * this method.\n     *\n     * Internally this adds an event listener on window for the `message` event\n     *\n     * @param validChildOrigins Array of origins that are allowed to request authentication from the host app\n     */\n    enablePostMessageAuth(validChildOrigins, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        this._hostHandler = this.createPostMessageHandler(validChildOrigins);\n        win.addEventListener(\"message\", this._hostHandler, false);\n    }\n    /**\n     * For a \"Host\" app that has embedded other platform apps via iframes, when the host needs\n     * to transition routes, it should call `ArcGISIdentityManager.disablePostMessageAuth()` to remove\n     * the event listener and prevent memory leaks\n     */\n    disablePostMessageAuth(win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        win.removeEventListener(\"message\", this._hostHandler, false);\n    }\n    /**\n     * Manually refreshes the current `token` and `tokenExpires`.\n     */\n    refreshCredentials(requestOptions) {\n        // make sure subsequent calls to getUser() don't returned cached metadata\n        this._user = null;\n        if (this.username && this.password) {\n            return this.refreshWithUsernameAndPassword(requestOptions);\n        }\n        if (this.clientId && this.refreshToken) {\n            return this.refreshWithRefreshToken();\n        }\n        return Promise.reject(new ArcGISTokenRequestError(\"Unable to refresh token. No refresh token or password present.\", ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED));\n    }\n    /**\n     * Determines the root of the ArcGIS Server or Portal for a given URL.\n     *\n     * @param url the URl to determine the root url for.\n     */\n    getServerRootUrl(url) {\n        const [root] = cleanUrl(url).split(/\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/);\n        const [match, protocol, domainAndPath] = root.match(/(https?:\\/\\/)(.+)/);\n        const [domain, ...path] = domainAndPath.split(\"/\");\n        // only the domain is lowercased because in some cases an org id might be\n        // in the path which cannot be lowercased.\n        return `${protocol}${domain.toLowerCase()}/${path.join(\"/\")}`;\n    }\n    /**\n     * Returns the proper [`credentials`] option for `fetch` for a given domain.\n     * See [trusted server](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-security.htm#ESRI_SECTION1_70CC159B3540440AB325BE5D89DBE94A).\n     * Used internally by underlying request methods to add support for specific security considerations.\n     *\n     * @param url The url of the request\n     * @returns \"include\" or \"same-origin\"\n     */\n    getDomainCredentials(url) {\n        if (!this.trustedDomains || !this.trustedDomains.length) {\n            return \"same-origin\";\n        }\n        return this.trustedDomains.some((domainWithProtocol) => {\n            return url.startsWith(domainWithProtocol);\n        })\n            ? \"include\"\n            : \"same-origin\";\n    }\n    /**\n     * Convenience method for {@linkcode ArcGISIdentityManager.destroy} for this instance of `ArcGISIdentityManager`\n     */\n    signOut() {\n        return ArcGISIdentityManager.destroy(this);\n    }\n    /**\n     * Return a function that closes over the validOrigins array and\n     * can be used as an event handler for the `message` event\n     *\n     * @param validOrigins Array of valid origins\n     */\n    createPostMessageHandler(validOrigins) {\n        // return a function that closes over the validOrigins and\n        // has access to the credential\n        return (event) => {\n            // Verify that the origin is valid\n            // Note: do not use regex's here. validOrigins is an array so we're checking that the event's origin\n            // is in the array via exact match. More info about avoiding postMessage xss issues here\n            // https://jlajara.gitlab.io/web/2020/07/17/Dom_XSS_PostMessage_2.html#tipsbypasses-in-postmessage-vulnerabilities\n            const isValidOrigin = validOrigins.indexOf(event.origin) > -1;\n            // JSAPI handles this slightly differently - instead of checking a list, it will respond if\n            // event.origin === window.location.origin || event.origin.endsWith('.arcgis.com')\n            // For Hub, and to enable cross domain debugging with port's in urls, we are opting to\n            // use a list of valid origins\n            // Ensure the message type is something we want to handle\n            const isValidType = event.data.type === \"arcgis:auth:requestCredential\";\n            // Ensure we don't pass an expired session forward\n            const isTokenValid = this.tokenExpires.getTime() > Date.now();\n            if (isValidOrigin && isValidType) {\n                let msg = {};\n                if (isTokenValid) {\n                    const credential = this.toJSON();\n                    msg = {\n                        type: \"arcgis:auth:credential\",\n                        credential\n                    };\n                }\n                else {\n                    msg = {\n                        type: \"arcgis:auth:error\",\n                        error: {\n                            name: \"tokenExpiredError\",\n                            message: \"Token was expired, and not returned to the child application\"\n                        }\n                    };\n                }\n                event.source.postMessage(msg, event.origin);\n            }\n        };\n    }\n    /**\n     * Validates that a given URL is properly federated with our current `portal`.\n     * Attempts to use the internal `federatedServers` cache first.\n     */\n    getTokenForServer(url, requestOptions) {\n        // requests to /rest/services/ and /rest/admin/services/ are both valid\n        // Federated servers may have inconsistent casing, so lowerCase it\n        const root = this.getServerRootUrl(url);\n        const existingToken = this.federatedServers[root];\n        if (existingToken &&\n            existingToken.expires &&\n            existingToken.expires.getTime() > Date.now()) {\n            return Promise.resolve(existingToken.token);\n        }\n        if (this._pendingTokenRequests[root]) {\n            return this._pendingTokenRequests[root];\n        }\n        this._pendingTokenRequests[root] = this.fetchAuthorizedDomains().then(() => {\n            return request(`${root}/rest/info`, {\n                credentials: this.getDomainCredentials(url)\n            })\n                .then((serverInfo) => {\n                if (serverInfo.owningSystemUrl) {\n                    /**\n                     * if this server is not owned by this portal\n                     * bail out with an error since we know we wont\n                     * be able to generate a token\n                     */\n                    if (!isFederated(serverInfo.owningSystemUrl, this.portal)) {\n                        throw new ArcGISTokenRequestError(`${url} is not federated with ${this.portal}.`, ArcGISTokenRequestErrorCodes.NOT_FEDERATED);\n                    }\n                    else {\n                        /**\n                         * if the server is federated, use the relevant token endpoint.\n                         */\n                        return request(`${serverInfo.owningSystemUrl}/sharing/rest/info`, requestOptions);\n                    }\n                }\n                else if (serverInfo.authInfo &&\n                    this.federatedServers[root] !== undefined) {\n                    /**\n                     * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n                     * federation, but the root server url is recognized, use its built in token endpoint.\n                     */\n                    return Promise.resolve({\n                        authInfo: serverInfo.authInfo\n                    });\n                }\n                else {\n                    throw new ArcGISTokenRequestError(`${url} is not federated with any portal and is not explicitly trusted.`, ArcGISTokenRequestErrorCodes.NOT_FEDERATED);\n                }\n            })\n                .then((serverInfo) => {\n                // an expired token cant be used to generate a new token so refresh our credentials before trying to generate a server token\n                if (this.token && this.tokenExpires.getTime() < Date.now()) {\n                    // If we are authenticated to a single server just refresh with username and password and use the new credentials as the credentials for this server.\n                    if (this.server) {\n                        return this.refreshCredentials().then(() => {\n                            return {\n                                token: this.token,\n                                expires: this.tokenExpires\n                            };\n                        });\n                    }\n                    // Otherwise refresh the credentials for the portal and generate a URL for the specific server.\n                    return this.refreshCredentials().then(() => {\n                        return this.generateTokenForServer(serverInfo.authInfo.tokenServicesUrl, root);\n                    });\n                }\n                else {\n                    return this.generateTokenForServer(serverInfo.authInfo.tokenServicesUrl, root);\n                }\n            })\n                .then((response) => {\n                this.federatedServers[root] = response;\n                delete this._pendingTokenRequests[root];\n                return response.token;\n            });\n        });\n        return this._pendingTokenRequests[root];\n    }\n    /**\n     * Generates a token for a given `serverUrl` using a given `tokenServicesUrl`.\n     */\n    generateTokenForServer(tokenServicesUrl, serverUrl) {\n        return request(tokenServicesUrl, {\n            params: {\n                token: this.token,\n                serverUrl,\n                expiration: this.tokenDuration\n            }\n        })\n            .then((response) => {\n            return {\n                token: response.token,\n                expires: new Date(response.expires - 1000 * 60 * 5)\n            };\n        })\n            .catch((e) => {\n            throw new ArcGISTokenRequestError(e.message, ArcGISTokenRequestErrorCodes.GENERATE_TOKEN_FOR_SERVER_FAILED, e.response, e.url, e.options);\n        });\n    }\n    /**\n     * Returns an unexpired token for the current `portal`.\n     */\n    getFreshToken(requestOptions) {\n        if (this.token && !this.tokenExpires) {\n            return Promise.resolve(this.token);\n        }\n        if (this.token &&\n            this.tokenExpires &&\n            this.tokenExpires.getTime() > Date.now()) {\n            return Promise.resolve(this.token);\n        }\n        if (!this._pendingTokenRequests[this.portal]) {\n            this._pendingTokenRequests[this.portal] = this.refreshCredentials(requestOptions).then(() => {\n                this._pendingTokenRequests[this.portal] = null;\n                return this.token;\n            });\n        }\n        return this._pendingTokenRequests[this.portal];\n    }\n    /**\n     * Refreshes the current `token` and `tokenExpires` with `username` and\n     * `password`.\n     */\n    refreshWithUsernameAndPassword(requestOptions) {\n        const params = {\n            username: this.username,\n            password: this.password,\n            expiration: this.tokenDuration,\n            client: \"referer\",\n            referer: this.referer\n                ? this.referer\n                : typeof window !== \"undefined\" &&\n                    typeof window.document !== \"undefined\" &&\n                    window.location &&\n                    window.location.origin\n                    ? window.location.origin\n                    : /* istanbul ignore next */\n                        NODEJS_DEFAULT_REFERER_HEADER\n        };\n        return (this.server\n            ? request(`${this.getServerRootUrl(this.server)}/rest/info`).then((response) => {\n                return request(response.authInfo.tokenServicesUrl, Object.assign({ params }, requestOptions));\n            })\n            : request(`${this.portal}/generateToken`, Object.assign({ params }, requestOptions)))\n            .then((response) => {\n            this.updateToken(response.token, new Date(response.expires));\n            return this;\n        })\n            .catch((e) => {\n            throw new ArcGISTokenRequestError(e.message, ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED, e.response, e.url, e.options);\n        });\n    }\n    /**\n     * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n     */\n    refreshWithRefreshToken(requestOptions) {\n        // If our refresh token expires sometime in the next 24 hours then refresh the refresh token\n        const ONE_DAY_IN_MILLISECONDS = 1000 * 60 * 60 * 24;\n        if (this.refreshToken &&\n            this.refreshTokenExpires &&\n            this.refreshTokenExpires.getTime() - ONE_DAY_IN_MILLISECONDS < Date.now()) {\n            return this.exchangeRefreshToken(requestOptions);\n        }\n        const options = Object.assign({ params: {\n                client_id: this.clientId,\n                refresh_token: this.refreshToken,\n                grant_type: \"refresh_token\"\n            } }, requestOptions);\n        return fetchToken(`${this.portal}/oauth2/token`, options)\n            .then((response) => {\n            return this.updateToken(response.token, response.expires);\n        })\n            .catch((e) => {\n            throw new ArcGISTokenRequestError(e.message, ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED, e.response, e.url, e.options);\n        });\n    }\n    /**\n     * Update the stored {@linkcode ArcGISIdentityManager.token} and {@linkcode ArcGISIdentityManager.tokenExpires} properties. This method is used internally when refreshing tokens.\n     * You may need to call this if you want update the token with a new token from an external source.\n     *\n     * @param newToken The new token to use for this instance of `ArcGISIdentityManager`.\n     * @param newTokenExpiration The new expiration date of the token.\n     * @returns\n     */\n    updateToken(newToken, newTokenExpiration) {\n        this._token = newToken;\n        this._tokenExpires = newTokenExpiration;\n        return this;\n    }\n    /**\n     * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n     * `tokenExpires`.\n     */\n    exchangeRefreshToken(requestOptions) {\n        const options = Object.assign({ params: {\n                client_id: this.clientId,\n                refresh_token: this.refreshToken,\n                redirect_uri: this.redirectUri,\n                grant_type: \"exchange_refresh_token\"\n            } }, requestOptions);\n        return fetchToken(`${this.portal}/oauth2/token`, options)\n            .then((response) => {\n            this._token = response.token;\n            this._tokenExpires = response.expires;\n            this._refreshToken = response.refreshToken;\n            this._refreshTokenExpires = response.refreshTokenExpires;\n            return this;\n        })\n            .catch((e) => {\n            throw new ArcGISTokenRequestError(e.message, ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED, e.response, e.url, e.options);\n        });\n    }\n    /**\n     * ensures that the authorizedCrossOriginDomains are obtained from the portal and cached\n     * so we can check them later.\n     *\n     * @returns this\n     */\n    fetchAuthorizedDomains() {\n        // if this token is for a specific server or we don't have a portal\n        // don't get the portal info because we cant get the authorizedCrossOriginDomains\n        if (this.server || !this.portal) {\n            return Promise.resolve(this);\n        }\n        return this.getPortal().then((portalInfo) => {\n            /**\n             * Specific domains can be configured as secure.esri.com or https://secure.esri.com this\n             * normalizes to https://secure.esri.com so we can use startsWith later.\n             */\n            if (portalInfo.authorizedCrossOriginDomains &&\n                portalInfo.authorizedCrossOriginDomains.length) {\n                this.trustedDomains = portalInfo.authorizedCrossOriginDomains\n                    .filter((d) => !d.startsWith(\"http://\"))\n                    .map((d) => {\n                    if (d.startsWith(\"https://\")) {\n                        return d;\n                    }\n                    else {\n                        return `https://${d}`;\n                    }\n                });\n            }\n            return this;\n        });\n    }\n}\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager}.\n * @internal\n *\n */ /* istanbul ignore next */\nfunction UserSession(options) {\n    console.log(\"DEPRECATED:, 'UserSession' is deprecated. Use 'ArcGISIdentityManager' instead.\");\n    return new ArcGISIdentityManager(options);\n}\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.beginOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.beginOAuth2 = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.beginOAuth2' is deprecated. Use 'ArcGISIdentityManager.beginOAuth2' instead.\");\n    return ArcGISIdentityManager.beginOAuth2(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.completeOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.completeOAuth2 = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.completeOAuth2()' is deprecated. Use 'ArcGISIdentityManager.completeOAuth2()' instead.\");\n    if (args.length <= 1) {\n        console.warn(\"WARNING:, 'UserSession.completeOAuth2()' is now async and returns a promise the resolves to an instance of `ArcGISIdentityManager`.\");\n    }\n    return ArcGISIdentityManager.completeOAuth2(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromParent}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromParent = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.fromParent' is deprecated. Use 'ArcGISIdentityManager.fromParent' instead.\");\n    return ArcGISIdentityManager.fromParent(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.authorize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.authorize = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.authorize' is deprecated. Use 'ArcGISIdentityManager.authorize' instead.\");\n    return ArcGISIdentityManager.authorize(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.exchangeAuthorizationCode = function (...args) {\n    console.warn(\"DEPRECATED:, 'UserSession.exchangeAuthorizationCode' is deprecated. Use 'ArcGISIdentityManager.exchangeAuthorizationCode' instead.\");\n    return ArcGISIdentityManager.exchangeAuthorizationCode(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromCredential}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromCredential = function (...args) {\n    console.log(\"DEPRECATED:, 'UserSession.fromCredential' is deprecated. Use 'ArcGISIdentityManager.fromCredential' instead.\");\n    console.warn(\"WARNING:, 'UserSession.fromCredential' now requires a `ServerInfo` object from the JS API as a second parameter.\");\n    return ArcGISIdentityManager.fromCredential(...args);\n};\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.deserialize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.deserialize = function (...args) {\n    console.log(\"DEPRECATED:, 'UserSession.deserialize' is deprecated. Use 'ArcGISIdentityManager.deserialize' instead.\");\n    return ArcGISIdentityManager.deserialize(...args);\n};\nexport { UserSession };\n//# sourceMappingURL=ArcGISIdentityManager.js.map",":host {\n  $color-green-forest: #31872E;\n  $color-white: #ffffff;\n  \n  background-color: var(--calcite-color-foreground-1);\n  color: var(--calcite-color-text-2);\n  display: block;\n  // padding: 20px;\n  overflow: auto;\n  div.banner {\n    display: block;\n    cursor: pointer;\n    /* padding: 0 20px; */\n    /* font-weight: 700; */\n    line-height: 60px;\n\n  }\n  .task-num {\n    display: inline-block;\n    height: 16px;\n    text-align: center;\n    border-radius: 16px;\n    // font-size: $font-size1;\n    border-color: $color-green-forest;\n    background-color: $color-green-forest;\n    margin-left: 4px;\n    color: $color-white;\n    line-height: 16px !important;\n    // padding: 1px 5px;\n    transition: all .25s cubic-bezier(.18, .89, .32, 1.28);\n\n    span {\n        position: relative;\n        line-height: 1 !important;\n        color: $color-white;\n        padding: 1px 4px;\n    }\n\n    // :host-context(html[dir='rtl']) & {\n    //     margin-left: unset;\n    //     margin-right: 4px;\n    // }\n\n    &.active {\n        -webkit-transform: scale(1.2);\n        transform: scale(1.2);\n    }\n  } \n  .error-message {\n   word-break: break-word; \n  }\n}\n\n:host-context([dir=\"rtl\"]) {\n  .task-num {\n    margin-left: unset!important;\n    margin-right: 4px;\n  }\n}\n\n","import { Component, Fragment, Host, Prop, Watch, State, h, Event, EventEmitter } from '@stencil/core';\n// import { ReportBase } from '../report-base/report-base';\nimport { PropsService } from '../../services/props.service';\nimport { EsriJobStatusType, ReportService } from '../../services/report.service';\nimport { UtilService } from '../../services/util.service';\nimport { TranslateService } from '../../services/translate.service';\nimport { StateService } from '../../services/state.service';\nimport { ArcGISIdentityManager, request, IRequestOptions } from '@esri/arcgis-rest-request';\n\n@Component({\n  tag: 'feature-report',\n  styleUrl: 'feature-report.scss',\n  shadow: true,\n})\nexport class FeatureReport {\n\n  // token \n  @Prop() token!: string;\n\n  @Prop() portalUrl?: string;\n\n  @Prop() apiUrl?: string;\n\n  // Feature layer or table URL. required\n  @Prop() featureLayerUrl!: string;\n\n  @Prop() surveyItemId?: string;\n\n  @Prop() templateItemId?: string;\n  @Watch('templateItemId')\n  templateItemIdChanged(newVal) {\n    PropsService.setProps({templateItemId: newVal});\n  }\n\n  @Prop() queryParameters!: string;  // Object string\n  @Watch('queryParameters')\n  queryParametersChanged(newVal) {\n    PropsService.setProps({\n      queryParameters: newVal\n    });\n    return this.reportService.getFeatureCount().then(()=> {\n      this.stateService.notifyDataChanged('update-features-preview', {value: undefined});  // no not use {value: null} here.\n    })\n  }\n  \n  @Prop() mergeFiles: 'none' | 'nextPage' | 'continuous';  \n  @Watch('mergeFiles')\n  mergeFilesChanged(newVal) {\n    PropsService.setProps({\n      mergeFiles: newVal\n    });\n  }\n\n  @Prop() outputFormat: string;\n  @Watch('outputFormat')\n  outputFormatChanged(newVal) {\n    PropsService.setProps({outputFormat: newVal});\n    this.outputFormat = PropsService.outputFormat;\n  }\n\n  \n  @Prop() outputReportName: string;\n  \n  @Prop() outputPackageName: string;\n  \n  @Prop() packageFiles: boolean | string;\n  \n  @Prop() uploadInfo: string;   // Object string\n  \n  @Prop() webmapItemId: string;\n  \n  @Prop() mapScale: string;\n\n  @Prop() locale?: string;  \n  @Watch('locale')\n  localeChanged(newVal) {\n    this.localeChangeHandler(newVal)\n    UtilService.getService().setDir();\n  }\n\n  @Prop() utcOffset?: string;\n\n  /**\n   * ui parameters\n   */\n  @Prop() show: string;\n  @Watch('show')\n  showChanged(newValue) {\n    // console.log(newValue, oldValue);\n    PropsService.setProps({show: newValue});\n    this.visibleConf = this.generateVisibleElems();\n    this.reportService.setHelperObj({\n      visibleConf: this.visibleConf\n    });\n  }\n\n  @Prop() hide: string;\n  @Watch('hide')\n  hideChanged(newVal) {\n    PropsService.setProps({hide: newVal});\n    this.visibleConf = this.generateVisibleElems();    \n    this.reportService.setHelperObj({\n      visibleConf: this.visibleConf\n    });\n  }\n\n  @Prop() inputFeatureTemplate: string;\n  @Watch('inputFeatureTemplate')\n  inputFeatureTemplateChanged(newVal) {\n    PropsService.setProps({inputFeatureTemplate: newVal});\n    this.stateService.notifyDataChanged('update-features-preview', {value: this.inputFeatureTemplate});\n  }\n  @Prop() label: string;\n  @Watch('label')\n  labelChanged(newVal) {\n    PropsService.setProps({label: newVal});\n    return Promise.resolve(true)    \n    .then(() => {\n      return TranslateService.getService().getTranslate();\n    })\n    .then((res) => {\n      const langTasks = res.customPrint.recentTasks;\n      this.langCustomPrint = res.customPrint;\n      this.langTasks = langTasks;\n      this.langCommon = res.common;\n      this.stateService.notifyDataChanged('locale-data-changed', {value: res});\n    });\n  }\n\n  @Prop() reportTemplateIds: string;\n  @Watch('reportTemplateIds')\n  reportTemplateIdsChanged(newVal) {\n    PropsService.setProps({\n      reportTemplateIds: newVal\n    });\n    // the select segment is hidden, update the report templates\n    this.updateTemplateList();\n  }\n\n  @Prop() clientId: string;\n\n  @Prop() requestSource: string;\n  @Watch('requestSource')\n  requestSourceChanged(newVal) {\n    PropsService.setProps({\n      requestSource: newVal\n    });\n  }\n\n  // @Prop() redirectUri: string; // must be the same with current url\n\n  \n  @Event() userInfoGetted: EventEmitter<any>;\n  @Event() i18nStringUpdated: EventEmitter<any>;\n  @Event() _credentialGetted: EventEmitter<any>; // internal\n  \n\n  // @Method()\n  // convertToSupportedLang(locale: string) {\n  //   return Promise.resolve(PropsService.convertToSupportedLang(locale));\n  // }\n\n  // @Method()\n  // getI18nCommonString() {\n  //   return Promise.resolve(this.langCommon);\n  // }\n\n  /**\n   * the following parameters are geneareted by the main parameters, ie:\n   * the where is genereated from queryParameters\n   * the username is generated from token \n   */\n  @State() where: string;    // todo: remove it\n  @State() username?: string;\n  @State() state: string = 'generate-report';\n  @State() visibleConf: string[] = [];\n  @State() checkingList: string[] = [];\n  @State() jobs: any[] = [];\n  @State() error: any;\n  @State() langTasks: any;\n  @State() langCommon: any;\n  @State() langCustomPrint: any;\n  @State() surveyItemInfo: any;\n\n  private stateService: StateService =  StateService.getService();\n  private reportService: ReportService = ReportService.getService();\n\n  componentWillLoad() {\n    PropsService.setProps(this);\n    this.portalUrl = PropsService.portalUrl;\n    this.outputFormat = PropsService.outputFormat;\n    return Promise.resolve(true)    \n    .then(() => {\n      return TranslateService.getService().getTranslate();\n    })\n    .then((res) => {\n      const langTasks = res.customPrint.recentTasks;\n      this.langCustomPrint = res.customPrint;\n      this.langTasks = langTasks;\n      this.langCommon = res.common;\n      this.i18nStringUpdated.emit({locale: PropsService.locale, i18n: this.langCommon});\n      if (!this.isOAuthCallbackpage()) {\n        if (!this.featureLayerUrl) {\n          this.error = {html: res.customPrint.missingRequiredParamsErr.replace('${$paramName}', `featureLayerUrl`)};\n          throw new Error('featureLayerUrl is required.');\n        }\n        if (!this.queryParameters) {\n          this.error = {html: res.customPrint.missingRequiredParamsErr.replace('${$paramName}', `queryParameters`)};\n          throw new Error('queryParameters is required.');\n        }\n      }\n    })\n    .then(() => {\n      if (this.token) {\n        this.init();\n        return true;\n      } else if (!this.token) {\n        // the callback page navigated from the oauth page\n        if (this.isOAuthCallbackpage()) {\n          /**\n           * the code is added from the oauth page navigation, as this is a web component, we can't use a dedicated oauth callback page, we have to use the original page,\n           * but if set the redirectUri as window.location.href here, the completeOAuth2 request will return invalid redirectUri error, because the url parameter has 'codes' and 'state'\n           * in fact, we didn't know what the correct redirectUri is, because it's not set by us, we are not the client id owner.\n           * so, maybe we should not call the ArcGISIdentityManager.beginOAuth2() here.\n           * Need a discussion with team.\n           */\n          const portalRest = `${this.portalUrl}/sharing/rest`;\n          const url = new URL(window.location.href);\n          const redirect_url = `${url.origin}${url.pathname}?portalUrl=${this.portalUrl}&isOAuthCallback=true`;\n          // #749, the redirect_url in completeOAuth2 and beginOAuth2 must be the same.\n          ArcGISIdentityManager.completeOAuth2({portal: portalRest, popup: true, clientId: this.clientId, redirectUri: redirect_url});\n          return;\n        } else {\n          // there is a bug in the platformSelf function inside of the @esri/arcgis-rest-request: the request: the \"withCredentials\" is from \n          // platformSelf(this.clientId, 'https://localhost:3333/', this.portalUrl).then(response => {\n          const requestUrl = `${this.portalUrl}/sharing/rest/oauth2/platformSelf?f=json`;\n          const param: IRequestOptions = {\n            httpMethod: 'POST',\n            headers: {\n              \"X-Esri-Auth-Client-Id\": this.clientId,\n              \"X-Esri-Auth-Redirect-Uri\": window.location.href\n            },\n            params: {\n              f: 'json'\n            },\n            credentials: 'include'\n          };\n          return request(requestUrl, param).then((response) => {\n            if (response.expires_in) {\n              response.expires = new Date().valueOf() + response.expires_in * 1000 - 1000 * 5;\n              delete response.expires_in;\n            }\n\n            this._credentialGetted.emit(response);\n            this.token= response.token;\n              PropsService.setProps(this);\n              this.init();\n              return true;\n            }).catch(() =>{\n              this.state = 'login';\n              // this.switchState('login');\n              // (document.querySelector('#login-modal') as any).open = true;\n              // return this.waitingUserLogin();\n            })\n      \n          }\n      }\n    }).catch((e) => {\n      console.error(e);\n    })\n\n  }\n\n  /**\n   * init the component\n   * before enter in this function, the token prop must be ready\n   */\n  init() {\n    // init the constructor of the props service\n    const utilService: UtilService = UtilService.getService();\n\n    this.stateService.subscribe('job-complete', (job) => {\n      const idx = this.checkingList.indexOf(job.jobId);\n      if (idx >= 0) {\n        if (job.jobStatus === EsriJobStatusType.partialSucceeded || job.jobStatus === EsriJobStatusType.succeeded) {\n          if (job?.resultInfo?.resultFiles) {\n            this.checkingList.splice(idx, 1);\n            this.checkingList = [].concat(this.checkingList);\n            this.reportService.downloadReport(job);\n          }\n        }\n      }\n    });\n    this.stateService.subscribe('show-error', (err) => {\n      this.error = err;\n    });\n\n    return Promise.resolve(true)\n    .then(() => {\n      // PropsService.setProps(this);\n      if (this.uploadInfo) {\n        this.reportService.setParamCache({\n          uploadInfo: JSON.parse(this.uploadInfo)\n        });\n      }\n      return true;\n    })\n    // .then(() => {\n    //   return TranslateService.getService().getTranslate();\n    // })\n    // .then((res) => {\n    //   const langTasks = res.customPrint.recentTasks;\n    //   this.langTasks = langTasks;\n    // })\n    .then(() => {\n      return utilService.getPortalInfo();\n    }).then((portalInfo: any) => {\n      /**\n       * check canCreateItem privilege\n       */\n      \n      const canCreateItem = portalInfo.user.privileges.includes('portal:user:createItem');\n      this.reportService.setHelperObj({canCreateItem: canCreateItem});\n      this.userInfoGetted.emit(portalInfo.user);\n      if (!this.locale) {\n        const newLocale = PropsService.getLocale({\n          userInfo: portalInfo.user,\n          portalInfo: portalInfo\n        });\n        if (newLocale !== PropsService.locale) {\n          this.localeChangeHandler(newLocale);\n        }\n      } else {\n        this.i18nStringUpdated.emit({locale: this.locale, i18n: this.langCommon});\n      }\n      UtilService.getService().setDir();\n      \n      // show elements after user info is gotten, because the user name is needed for the report setting section.\n      this.visibleConf = this.generateVisibleElems();\n      this.reportService.setHelperObj({\n        visibleConf: this.visibleConf\n      });\n      this.stateService.notifyDataChanged('portal-info-updated');\n      if (PropsService.surveyItemId) {\n        return utilService.getSurveyItemInfo(PropsService.surveyItemId);\n      }\n      // return true;\n    })\n    .catch((e) => {\n      this.reportService.setHelperObj({surveyIsInvalid: true});\n      this.surveyItemInfo = {};\n\n      this.reportService.manageError(e, 'surveyItemId');\n    })\n    .then((surveyItemInfo) => {\n      this.surveyItemInfo = surveyItemInfo;\n      this.reportService.setHelperObj({surveyIsInvalid: false});\n      this.reportService.initParamCache();\n      return this.reportService.getFeatureCount();\n    })\n    .then(() => {\n      this.stateService.notifyDataChanged('update-features-preview', {value: undefined});\n      // if the template chooser component will hidden, get the templates\n      // todo: seems we only need to choose the selected template?\n      return this.updateTemplateList()\n    })\n    .catch((err) => {\n      if (err.message && !err.html) {\n        err.html = err.message;\n      }\n      this.error = err;\n    });\n  }\n\n  /**\n   * todo: when the component is embeded in an iframe, will hit the same-origin policy problem:\n   * the beginOAuth2 is called in iframe, it will write some info(stateId) to localStorage, but the completeOAuth2 will called in a stanalone page, it cann't read the stateId.\n   * @returns \n   */\n  startLogin() {\n    const portalRest = `${this.portalUrl}/sharing/rest`;\n    const url = new URL(window.location.href);\n    const redirect_url = `${url.origin}${url.pathname}?portalUrl=${this.portalUrl}&isOAuthCallback=true`;\n    return ArcGISIdentityManager.beginOAuth2({portal: portalRest, popup: true, clientId: this.clientId, redirectUri: redirect_url}).then((idm: ArcGISIdentityManager) => {\n      this.token= idm.token;\n      PropsService.setProps(this);\n      this.switchState('generate-report');\n      this.init();\n      this._credentialGetted.emit(idm.toCredential());\n      return true;\n     })  \n  }\n\n  isOAuthCallbackpage() {\n    const url = new URL(window.location.href);\n    return (url.search + '').includes(\"isOAuthCallback=true\");\n  }\n\n  /**\n   * locale change handler\n   * @param newLocale \n   * @returns \n   */\n  localeChangeHandler(newLocale) {\n    PropsService.setProps({locale: newLocale});\n    return Promise.resolve(true)    \n    .then(() => {\n      return TranslateService.getService().getTranslate();\n    })\n    .then((res) => {\n      const langTasks = res.customPrint.recentTasks;\n      this.langCustomPrint = res.customPrint;\n      this.langTasks = langTasks;\n      this.langCommon = res.common;\n      this.stateService.notifyDataChanged('locale-data-changed', {value: res});\n      this.i18nStringUpdated.emit({locale: newLocale, i18n: this.langCommon});\n\n      return true;\n    });\n  }\n\n  /**\n   * get visible elements\n   * @returns \n   */\n  generateVisibleElems() {\n    const elems = ['inputFeatures', 'selectTemplate', 'fileOptions', 'reportName', 'saveToAGSAccount', 'outputFormat', 'showCredits', 'recentReports'];\n    \n    let result = [];\n    if (this.show?.length) {\n      result = this.show.split(',');\n    } else if (this.hide?.length) {\n      const hides = this.hide.split(',');\n      result = elems.filter((ele) => {\n        return hides.indexOf(ele) < 0;\n      })\n    } else {\n      result = elems;\n    }\n    if (result.indexOf('fileOptions') < 0 && result.indexOf('reportName') < 0 && result.indexOf('saveToAGSAccount') < 0 && result.indexOf('outputFormat') < 0) {\n      //\n    } else {\n      result.push('reportSetting');\n    }\n    return [].concat(result);\n  }\n\n  switchState(state) {\n    this.state = state;\n  }\n\n  /**\n   * update template list\n   * @returns \n   */\n  updateTemplateList() {\n    return Promise.resolve(true).then(() => {\n      if (this.visibleConf.indexOf('selectTemplate') < 0 ) {\n        const param = this.reportTemplateIds === undefined ? {} : {templateIds: this.reportTemplateIds}\n        return this.reportService.getReportTemplates(this.surveyItemId, param);\n      }\n    })\n    .then((templates) => {\n      if (templates) {\n        this.reportService.setHelperObj({\n          printTemplates: templates\n        });\n        this.stateService.notifyDataChanged('print-templates-updated', {value: templates});\n        // set the first template as the default template if the templateItemId is not provided.\n\n        const paramStore: any = this.reportService.getParamCache();\n        const templateItemId = paramStore.templateItemId || PropsService.templateItemId;\n        if (!templateItemId && templates.length) {\n          const selectedTemplateId = templates[0].id;\n          this.reportService.setParamCache({\n            templateItemId: selectedTemplateId\n          });\n          // this.selectedTemplateChange.emit(this.selectedTemplateId);\n        }\n      }\n    });\n  }\n\n  generateReportHander(evt) {\n    const detail = evt.detail;\n    this.jobs = detail.jobs;\n    // this.checkingList.push()\n    this.checkingList = [...this.checkingList, evt.detail.jobId];\n    // if (this.visibleConf.indexOf('recentReports') >= 0) {\n    this.state = 'report-list';\n    // }\n    // this.checkingList = [].concat(detail.checkingList || []);\n  }\n\n  render() {\n    return (\n      <Host>\n        <calcite-panel>\n          <div style={{display: (this.state === 'generate-report' && this.token) ? 'block': 'none'}}>\n            {/* features preview */}\n            \n            {this.visibleConf.indexOf('inputFeatures') <0 ? '' : <features-preview queryParameters={this.queryParameters} inputFeatureTemplate={this.inputFeatureTemplate}></features-preview>}\n            \n            {/* select print template */}\n            {this.visibleConf.indexOf('selectTemplate') <0 || !this.surveyItemInfo ? '' : <template-chooser selectedTemplateId={this.templateItemId} templateIds={this.reportTemplateIds}></template-chooser>}\n            \n            {this.visibleConf.indexOf('reportSetting') <0 ? '' : <report-settings visibleElems={this.visibleConf} mergeFiles={this.mergeFiles} outputFormat={this.outputFormat} fileName={this.outputReportName}></report-settings>}\n            \n            <report-generator visibleConf={this.visibleConf} templateItemId={this.templateItemId} onReportCreated={(evt) => {this.generateReportHander(evt)}}></report-generator>\n            \n            {/* {this.visibleConf.indexOf('recentReports') <0 ? '' : <view-report-link checkingList={this.checkingList} onViewReportLinkClicked={() => this.switchState('report-list')}></view-report-link>} */}\n            \n            {/* recent tasks action */}\n            {this.visibleConf.indexOf('recentReports') <0 ?\n              null: \n              <div class=\"banner\">        \n                {/* <calcite-action onClick={() => this.linkClicked()} text={`${this.langTasks?.label} ${this.checkingList?.length || ''}`} icon=\"chevrons-right\" text-enabled></calcite-action> */}\n                <calcite-action onClick={() => this.switchState('report-list')} icon=\"chevrons-right\" text-enabled>\n                  <span>{this.langTasks?.label}</span>\n                  {this.checkingList?.length ? \n                  <Fragment>\n                    <div class=\"task-num\" id='task-num'>\n                      <span>{`${this.checkingList.length || ''}`}</span>\n                    </div>\n\n                    <calcite-tooltip label={this.langTasks.panelNumberTip} reference-element=\"task-num\">\n                      <span>{this.langTasks.panelNumberTip}</span>\n                    </calcite-tooltip>\n                    </Fragment>\n                    : null\n                  }\n                </calcite-action>\n\n                {/* <calcite-action onClick={() => this.linkClicked()} text={this.langTasks?.label} icon=\"chevrons-right\" text-enabled></calcite-action> */}\n              </div> \n            }\n          </div>\n            \n          { this.token ? \n            <task-list style={{display: (this.state === 'report-list') ? 'block': 'none'}} jobs={this.jobs} onGoBackClicked={() => {this.state = 'generate-report'}}></task-list> \n          : ''}\n          \n          {\n            this.error ?\n            <calcite-alert slot=\"alerts\" open onCalciteAlertClose={() => {this.error = null;}} label={this.error.html} icon kind={this.error.alertType || 'danger'} placement=\"top\" scale=\"s\">\n              {/* <div slot=\"title\">{this.error.html}</div> */}\n              <div class=\"error-message\" slot=\"message\">\n                {this.error.html}\n                {this.error.detail ?\n                  <p innerHTML={this.error.detail}>\n                  </p>\n                  : null\n                }\n                </div>\n              {/* <calcite-link slot=\"link\">Link</calcite-link> */}\n            </calcite-alert>\n            : null\n          }\n          {this.state === 'login' && !PropsService.token ? \n          <calcite-modal aria-labelledby=\"modal-title\" id=\"login-modal\" outside-close-disabled=\"true\" scale=\"s\" width-scale=\"s\" close-button-disabled=\"true\" open=\"true\">\n            <div slot=\"header\" id=\"modal-title\">\n            {this.langCommon?.signIn}\n            </div>\n            <div slot=\"content\">\n              <calcite-label style={{height: '100px'}}>\n                <p>{this.langCommon?.signInMsg}</p>\n                <calcite-button id=\"reportLoginBtn\" kind=\"brand\" onClick={() => this.startLogin()}>\n                  {this.langCommon?.signIn}\n                </calcite-button>\n              </calcite-label>\n            </div>\n          </calcite-modal>\n          : ''}\n        </calcite-panel>\n      <slot></slot>\n      </Host>\n    );\n  }\n\n}\n"],"mappings":"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","ignoreList":[]}