{"file":"util.service.js","mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,gBAAgB,CAAC,MAAM,EAAE;AACzC,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK;AAC7C,QAAQ,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAChC,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,YAAY,OAAO,KAAK,CAAC;AACzB,SAAS;AACT,QAAQ,IAAI,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE;AACpC,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;AACpC,SAAS;AACT,QAAQ,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;AAC5C,QAAQ,QAAQ,IAAI;AACpB,YAAY,KAAK,OAAO;AACxB,gBAAgB,OAAO,KAAK,CAAC;AAC7B,YAAY,KAAK,QAAQ;AACzB,gBAAgB,OAAO,KAAK,CAAC;AAC7B,YAAY,KAAK,MAAM;AACvB,gBAAgB,OAAO,KAAK,CAAC;AAC7B,YAAY,KAAK,UAAU;AAC3B,gBAAgB,OAAO,KAAK,CAAC;AAC7B,YAAY,KAAK,SAAS;AAC1B,gBAAgB,OAAO,KAAK,CAAC;AAC7B,YAAY,KAAK,QAAQ;AACzB,gBAAgB,OAAO,KAAK,CAAC;AAC7B,YAAY,KAAK,QAAQ;AACzB,gBAAgB,OAAO,KAAK,CAAC;AAC7B,YAAY;AACZ,gBAAgB,OAAO,IAAI,CAAC;AAC5B,SAAS;AACT,KAAK,CAAC,CAAC;AACP,CAAC;AACD;AACA;AACA;AACA;AACA;AACO,SAAS,aAAa,CAAC,MAAM,EAAE;AACtC,IAAI,MAAM,SAAS,GAAG,EAAE,CAAC;AACzB,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;AACzC,QAAQ,IAAI,EAAE,EAAE,EAAE,CAAC;AACnB,QAAQ,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAChC,QAAQ,IAAI,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE;AACpC,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;AACpC,SAAS;AACT,QAAQ,IAAI,CAAC,KAAK;AAClB,YAAY,KAAK,KAAK,CAAC;AACvB,YAAY,OAAO,KAAK,KAAK,SAAS;AACtC,YAAY,OAAO,KAAK,KAAK,QAAQ,EAAE;AACvC,YAAY,OAAO;AACnB,SAAS;AACT,QAAQ,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;AAC5C,QAAQ,IAAI,KAAK,CAAC;AAClB;AACA;AACA;AACA;AACA,QAAQ,QAAQ,IAAI;AACpB,YAAY,KAAK,OAAO;AACxB;AACA;AACA;AACA,gBAAgB,MAAM,gBAAgB,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,WAAW,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC;AACjK,gBAAgB,KAAK;AACrB,oBAAoB,gBAAgB,KAAK,OAAO;AAChD,0BAA0B,KAAK;AAC/B,0BAA0B,gBAAgB,KAAK,QAAQ;AACvD,8BAA8B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;AACnD,8BAA8B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9C,gBAAgB,MAAM;AACtB,YAAY,KAAK,QAAQ;AACzB,gBAAgB,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC9C,gBAAgB,MAAM;AACtB,YAAY,KAAK,MAAM;AACvB,gBAAgB,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;AACxC,gBAAgB,MAAM;AACtB,YAAY,KAAK,UAAU;AAC3B,gBAAgB,KAAK,GAAG,IAAI,CAAC;AAC7B,gBAAgB,MAAM;AACtB,YAAY,KAAK,SAAS;AAC1B,gBAAgB,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC;AACnC,gBAAgB,MAAM;AACtB,YAAY;AACZ,gBAAgB,KAAK,GAAG,KAAK,CAAC;AAC9B,gBAAgB,MAAM;AACtB,SAAS;AACT,QAAQ,IAAI,KAAK;AACjB,YAAY,KAAK,KAAK,CAAC;AACvB,YAAY,OAAO,KAAK,KAAK,QAAQ;AACrC,YAAY,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AAClC,YAAY,SAAS,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACnC,SAAS;AACT,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,SAAS,CAAC;AACrB;;ACnGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE;AACxC;AACA,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AACrE,QAAQ,OAAO,KAAK;AACpB,aAAa,GAAG,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AAC5D,aAAa,IAAI,CAAC,GAAG,CAAC,CAAC;AACvB,KAAK;AACL,IAAI,OAAO,kBAAkB,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACrE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,iBAAiB,CAAC,MAAM,EAAE;AAC1C,IAAI,MAAM,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;AAC5C,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;AACjC,SAAS,GAAG,CAAC,CAAC,GAAG,KAAK;AACtB,QAAQ,OAAO,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAChD,KAAK,CAAC;AACN,SAAS,IAAI,CAAC,GAAG,CAAC,CAAC;AACnB;;IChCA,eAAc,GAAG;AACjB,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ;AAC/B,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI;AACvB,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI;AACvB,CAAC;;ACJD;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,cAAc,CAAC,MAAM,EAAE,aAAa,EAAE;AACtD;AACA,IAAI,MAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC;AAClE,IAAI,MAAM,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;AAC5C,IAAI,IAAI,WAAW,EAAE;AACrB,QAAQ,MAAM,QAAQ,GAAG,IAAIA,wBAAQ,EAAE,CAAC;AACxC,QAAQ,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;AAChD,YAAY,IAAI,OAAO,IAAI,KAAK,WAAW,IAAI,SAAS,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC;AACrF,gBAAgB,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;AAC/D,aAAa;AACb,iBAAiB;AACjB,gBAAgB,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AACrD,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,OAAO,QAAQ,CAAC;AACxB,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,iBAAiB,CAAC,MAAM,CAAC,CAAC;AACzC,KAAK;AACL;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,kBAAkB,SAAS,KAAK,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE;AACvD;AACA,QAAQ,KAAK,CAAC,OAAO,CAAC,CAAC;AACvB;AACA;AACA;AACA;AACA,QAAQ,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;AACjD,QAAQ,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACjD,QAAQ,OAAO,GAAG,OAAO,IAAI,eAAe,CAAC;AAC7C,QAAQ,IAAI,GAAG,IAAI,IAAI,oBAAoB,CAAC;AAC5C,QAAQ,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC;AACzC,QAAQ,IAAI,CAAC,OAAO;AACpB,YAAY,IAAI,KAAK,oBAAoB,GAAG,OAAO,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;AAC5E,QAAQ,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;AACvC,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACzB,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACjC,QAAQ,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACvB,QAAQ,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC/B,KAAK;AACL;;AC7CA;AACA;AACA;AACA;AACA;AACO,SAAS,IAAI,CAAC,OAAO,EAAE;AAC9B,IAAI,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;AACjC,QAAQ,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;AAC/C,KAAK;AACL;;ACTA,eAA0B,SAAS,QAAQ,GAAG;AAC9C,EAAE,OAAO,OAAO,CAAC,OAAO,CAAC;AACzB,IAAI,KAAK,EAAE,UAAU,CAAC,KAAK;AAC3B,IAAI,OAAO,EAAE,UAAU,CAAC,OAAO;AAC/B,IAAI,QAAQ,EAAE,UAAU,CAAC,QAAQ;AACjC,IAAI,OAAO,EAAE,UAAU,CAAC,OAAO;AAC/B,GAAG,CAAC,CAAC;AACL,CAAC;;ACPD;AACA;AAOY,MAAC,6BAA6B,GAAG,CAAC,oBAAoB,EAAE;AAuB7D,SAAS,wBAAwB,GAAG;AAC3C,IAAI,QAAQ,UAAU,CAAC,8BAA8B,IAAI;AACzD,QAAQ,UAAU,EAAE,MAAM;AAC1B,QAAQ,MAAM,EAAE;AAChB,YAAY,CAAC,EAAE,MAAM;AACrB,SAAS;AACT,KAAK,EAAE;AACP,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,eAAe,SAAS,kBAAkB,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,WAAW,CAAC,OAAO,GAAG,sBAAsB,EAAE,IAAI,GAAG,2BAA2B,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE;AAC9G,QAAQ,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AACrD,QAAQ,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;AACtC,QAAQ,IAAI,CAAC,OAAO;AACpB,YAAY,IAAI,KAAK,2BAA2B,GAAG,OAAO,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;AACnF;AACA;AACA;AACA;AACA,QAAQ,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;AACjD,QAAQ,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACjD,KAAK;AACL,IAAI,KAAK,CAAC,UAAU,EAAE,UAAU,GAAG,CAAC,EAAE;AACtC,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;AACtB,QAAQ,MAAM,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,KAAK;AAClD,YAAY,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;AAC9B,YAAY,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC;AAC9C,iBAAiB,IAAI,CAAC,CAAC,OAAO,KAAK;AACnC,gBAAgB,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC;AAC/G,gBAAgB,OAAO,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AAC7D,aAAa,CAAC;AACd,iBAAiB,IAAI,CAAC,CAAC,QAAQ,KAAK;AACpC,gBAAgB,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClC,aAAa,CAAC;AACd,iBAAiB,KAAK,CAAC,CAAC,CAAC,KAAK;AAC9B,gBAAgB,IAAI,CAAC,CAAC,IAAI,KAAK,iBAAiB,IAAI,KAAK,GAAG,UAAU,EAAE;AACxE,oBAAoB,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAClD,iBAAiB;AACjB,qBAAqB,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;AAC7C,oBAAoB,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO;AAC9C,oBAAoB,KAAK,IAAI,UAAU,EAAE;AACzC,oBAAoB,MAAM,CAAC,IAAI,CAAC,CAAC;AACjC,iBAAiB;AACjB,qBAAqB;AACrB,oBAAoB,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9B,iBAAiB;AACjB,aAAa,CAAC,CAAC;AACf,SAAS,CAAC;AACV,QAAQ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAChD,YAAY,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC1C,SAAS,CAAC,CAAC;AACX,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,cAAc,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,EAAE;AAClF;AACA,IAAI,IAAI,QAAQ,CAAC,IAAI,IAAI,GAAG,EAAE;AAC9B,QAAQ,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;AAC3C,QAAQ,MAAM,IAAI,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AAC5E,KAAK;AACL;AACA,IAAI,IAAI,QAAQ,CAAC,KAAK,EAAE;AACxB,QAAQ,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC;AAC9D,QAAQ,MAAM,SAAS,GAAG,WAAW,IAAI,IAAI,IAAI,oBAAoB,CAAC;AACtE,QAAQ,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,EAAE;AAC1C,YAAY,IAAI,iBAAiB,EAAE;AACnC,gBAAgB,MAAM,iBAAiB,CAAC;AACxC,aAAa;AACb,iBAAiB;AACjB,gBAAgB,MAAM,IAAI,eAAe,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AACtF,aAAa;AACb,SAAS;AACT,QAAQ,MAAM,IAAI,kBAAkB,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AACjF,KAAK;AACL;AACA,IAAI,IAAI,QAAQ,CAAC,MAAM,KAAK,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAE;AACvE,QAAQ,IAAI,OAAO,CAAC;AACpB,QAAQ,IAAI,IAAI,GAAG,oBAAoB,CAAC;AACxC,QAAQ,IAAI;AACZ,YAAY,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC;AACjE,YAAY,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC;AAC3D,SAAS;AACT,QAAQ,OAAO,CAAC,EAAE;AAClB,YAAY,OAAO,GAAG,QAAQ,CAAC,aAAa,IAAI,QAAQ,CAAC,OAAO,CAAC;AACjE,SAAS;AACT,QAAQ,MAAM,IAAI,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AAC5E,KAAK;AACL,IAAI,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,eAAe,CAAC,GAAG,EAAE,cAAc,EAAE;AACrD,IAAI,MAAM,QAAQ,GAAG,wBAAwB,EAAE,CAAC;AAChD,IAAI,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,QAAQ,CAAC,EAAE,cAAc,CAAC,EAAE;AAClH,QAAQ,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,cAAc,CAAC,MAAM,CAAC;AACxF,QAAQ,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,OAAO,CAAC,EAAE,cAAc,CAAC,OAAO,CAAC;AAC3F,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;AAChD,IAAI,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;AAChE,IAAI,IAAI,iBAAiB,GAAG,IAAI,CAAC;AACjC,IAAI,MAAM,YAAY,GAAG;AACzB,QAAQ,MAAM,EAAE,UAAU;AAC1B,QAAQ,MAAM,EAAE,OAAO,CAAC,MAAM;AAC9B;AACA;AACA,QAAQ,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,aAAa;AACzD,KAAK,CAAC;AACN;AACA;AACA;AACA,IAAI,IAAI,OAAO,CAAC,OAAO;AACvB,QAAQ,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC;AAChD,QAAQ,GAAG,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,EAAE;AAClD,QAAQ,YAAY,CAAC,WAAW,GAAG,SAAS,CAAC;AAC7C,KAAK;AACL,IAAI,IAAI,cAAc,CAAC;AACvB;AACA;AACA,IAAI,IAAI,OAAO,OAAO,CAAC,cAAc,KAAK,QAAQ,EAAE;AACpD,QAAQ,MAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC;AAChD,QAAQ,cAAc,GAAG;AACzB,YAAY,MAAM,EAAE,qCAAqC;AACzD,YAAY,QAAQ,EAAE,MAAM;AAC5B,gBAAgB,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjD,aAAa;AACb,SAAS,CAAC;AACV;AACA,QAAQ,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC;AACtD,YAAY,CAAC,OAAO,CAAC,gBAAgB;AACrC,YAAY,CAAC,UAAU,CAAC,qCAAqC;AAC7D,UAAU;AACV,YAAY,IAAI,CAAC,CAAC,2NAA2N,CAAC,CAAC,CAAC;AAChP,YAAY,UAAU,CAAC,qCAAqC,GAAG,IAAI,CAAC;AACpE,SAAS;AACT,KAAK;AACL,SAAS;AACT,QAAQ,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;AAChD,KAAK;AACL;AACA;AACA,IAAI,MAAM,WAAW,GAAG,GAAG,CAAC;AAC5B,IAAI,OAAO,CAAC,cAAc;AAC1B,UAAU,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK;AACtD;AACA;AACA;AACA;AACA;AACA,YAAY,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;AAC1B,YAAY,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB,GAAG,GAAG,CAAC;AACpC,YAAY,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AACvC,SAAS,CAAC;AACV,UAAU,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;AAC7B,SAAS,IAAI,CAAC,CAAC,KAAK,KAAK;AACzB,QAAQ,IAAI,KAAK,CAAC,MAAM,EAAE;AAC1B,YAAY,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;AACjC,SAAS;AACT,QAAQ,IAAI,cAAc,IAAI,cAAc,CAAC,oBAAoB,EAAE;AACnE,YAAY,YAAY,CAAC,WAAW,GAAG,cAAc,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;AAChF,SAAS;AACT;AACA,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC;AAClC,QAAQ,IAAI,YAAY,CAAC,MAAM,KAAK,KAAK,EAAE;AAC3C;AACA;AACA,YAAY,IAAI,MAAM,CAAC,KAAK;AAC5B,gBAAgB,OAAO,CAAC,SAAS;AACjC;AACA,gBAAgB,OAAO,MAAM,KAAK,WAAW,EAAE;AAC/C,gBAAgB,cAAc,CAAC,sBAAsB,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AAClF,gBAAgB,OAAO,MAAM,CAAC,KAAK,CAAC;AACpC,aAAa;AACb;AACA,YAAY,MAAM,WAAW,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;AAC1D;AACA,YAAY,MAAM,kBAAkB,GAAG,WAAW,KAAK,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;AACxG,YAAY;AACZ;AACA,YAAY,CAAC,OAAO,CAAC,YAAY;AACjC,gBAAgB,kBAAkB,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY;AAChE;AACA,iBAAiB,MAAM,CAAC,KAAK,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;AACrD;AACA;AACA,gBAAgB,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;AAC7C;AACA,gBAAgB,IAAI,KAAK,CAAC,MAAM,IAAI,OAAO,CAAC,SAAS,EAAE;AACvD,oBAAoB,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;AACzC;AACA,oBAAoB,OAAO,cAAc,CAAC,sBAAsB,CAAC,CAAC;AAClE,iBAAiB;AACjB,aAAa;AACb,iBAAiB;AACjB;AACA,gBAAgB,GAAG,GAAG,kBAAkB,CAAC;AACzC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,QAAQ,MAAM,aAAa,GAAG,IAAI,MAAM,CAAC,2BAA2B,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAChF,QAAQ,IAAI,YAAY,CAAC,MAAM,KAAK,MAAM,EAAE;AAC5C,YAAY,YAAY,CAAC,IAAI,GAAG,cAAc,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AACtE,SAAS;AACT;AACA,QAAQ,YAAY,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;AACjG;AACA;AACA;AACA,QAAQ,IAAI,CAAC,OAAO,MAAM,KAAK,WAAW;AAC1C,aAAa,MAAM,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW,CAAC;AAC9D,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE;AAC3C,YAAY,YAAY,CAAC,OAAO,CAAC,OAAO,GAAG,6BAA6B,CAAC;AACzE,SAAS;AACT;AACA,QAAQ,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE;AACzD,YAAY,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC;AAChD,gBAAgB,mCAAmC,CAAC;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,OAAO,UAAU,CAAC,KAAK;AAC/B,cAAc,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,YAAY,CAAC;AACjD,cAAc,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK;AAC7C,gBAAgB,OAAO,KAAK,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;AAChD,aAAa,CAAC,CAAC;AACf,KAAK,CAAC;AACN,SAAS,IAAI,CAAC,CAAC,QAAQ,KAAK;AAC5B;AACA,QAAQ,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAC1B;AACA;AACA,YAAY,OAAO,QAAQ;AAC3B,iBAAiB,IAAI,EAAE;AACvB,iBAAiB,IAAI,CAAC,CAAC,SAAS,KAAK;AACrC;AACA,gBAAgB,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,QAAQ,CAAC;AACxD,gBAAgB,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC;AAC7D,gBAAgB,MAAM,gBAAgB,GAAG,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAClG,gBAAgB,MAAM,IAAI,kBAAkB,CAAC,gBAAgB,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AACxH,aAAa,CAAC;AACd,iBAAiB,KAAK,CAAC,CAAC,CAAC,KAAK;AAC9B;AACA,gBAAgB,IAAI,CAAC,CAAC,IAAI,KAAK,oBAAoB,EAAE;AACrD,oBAAoB,MAAM,CAAC,CAAC;AAC5B,iBAAiB;AACjB;AACA,gBAAgB,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,QAAQ,CAAC;AACxD,gBAAgB,MAAM,IAAI,kBAAkB,CAAC,UAAU,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AACnG,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,IAAI,WAAW,EAAE;AACzB,YAAY,OAAO,QAAQ,CAAC;AAC5B,SAAS;AACT,QAAQ,QAAQ,MAAM,CAAC,CAAC;AACxB,YAAY,KAAK,MAAM;AACvB,gBAAgB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACvC,YAAY,KAAK,SAAS;AAC1B,gBAAgB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACvC,YAAY,KAAK,MAAM;AACvB,gBAAgB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACvC,YAAY,KAAK,MAAM;AACvB,gBAAgB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACvC;AACA,YAAY;AACZ,gBAAgB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACvC,SAAS;AACT,KAAK,CAAC;AACN,SAAS,IAAI,CAAC,CAAC,IAAI,KAAK;AACxB;AACA;AACA,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,MAAM,IAAI,MAAM,CAAC,CAAC,KAAK,SAAS,KAAK,CAAC,WAAW,EAAE;AAC7E,YAAY,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;AACnG,YAAY,IAAI,iBAAiB,EAAE;AACnC;AACA;AACA;AACA;AACA,gBAAgB,MAAM,YAAY,GAAG,GAAG;AACxC,qBAAqB,WAAW,EAAE;AAClC,qBAAqB,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,gBAAgB,OAAO,CAAC,cAAc,CAAC,gBAAgB,CAAC,YAAY,CAAC,GAAG;AACxE,oBAAoB,KAAK,EAAE,EAAE;AAC7B;AACA,oBAAoB,OAAO,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,IAAI,CAAC;AAChE,iBAAiB,CAAC;AAClB,gBAAgB,iBAAiB,GAAG,IAAI,CAAC;AACzC,aAAa;AACb,YAAY,OAAO,QAAQ,CAAC;AAC5B,SAAS;AACT,aAAa;AACb,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,KAAK,CAAC,CAAC;AACP,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,OAAO,CAAC,GAAG,EAAE,cAAc,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;AACzE,IAAI,OAAO,eAAe,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK;AAC7D,QAAQ,IAAI,CAAC,YAAY,eAAe;AACxC,YAAY,cAAc,CAAC,cAAc;AACzC,YAAY,OAAO,cAAc,CAAC,cAAc,KAAK,QAAQ;AAC7D,YAAY,cAAc,CAAC,cAAc,CAAC,UAAU;AACpD,YAAY,cAAc,CAAC,cAAc,CAAC,kBAAkB,EAAE;AAC9D,YAAY,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM;AACjC,gBAAgB,OAAO,cAAc,CAAC,cAAc,CAAC,kBAAkB,EAAE,CAAC;AAC1E,aAAa,EAAE,CAAC,CAAC,CAAC;AAClB,SAAS;AACT,aAAa;AACb,YAAY,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACrC,SAAS;AACT,KAAK,CAAC,CAAC;AACP;;AClaA;AACA;AACA;AACA;AACA;AACO,SAAS,QAAQ,CAAC,GAAG,EAAE;AAC9B;AACA,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AACjC,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL;AACA,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;AACrB;AACA,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;AACrC,QAAQ,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/B,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf;;ACjBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,YAAY,CAAC,cAAc,GAAG,EAAE,EAAE;AAClD;AACA,IAAI,IAAI,cAAc,CAAC,MAAM,EAAE;AAC/B,QAAQ,OAAO,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AAC/C,KAAK;AACL;AACA,IAAI,IAAI,cAAc,CAAC,cAAc;AACrC,QAAQ,OAAO,cAAc,CAAC,cAAc,KAAK,QAAQ,EAAE;AAC3D;AACA,QAAQ,OAAO,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC;AACpD,KAAK;AACL;AACA,IAAI,OAAO,qCAAqC,CAAC;AACjD;;ACxBA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,OAAO,CAAC,EAAE,EAAE,cAAc,EAAE;AAC5C,IAAI,MAAM,GAAG,GAAG,cAAc,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;AACnD;AACA,IAAI,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,cAAc,CAAC,CAAC;AACzE,IAAI,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACjC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,cAAc,GAAG,CAAC,EAAE,EAAE,yBAAyB,KAAK;AACjE,IAAI,MAAM,SAAS,GAAG,OAAO,yBAAyB,KAAK,QAAQ;AACnE,UAAU,yBAAyB;AACnC,UAAU,YAAY,CAAC,yBAAyB,CAAC,CAAC;AAClD,IAAI,OAAO,CAAC,EAAE,SAAS,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC;AAmCF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,eAAe,CAAC,cAAc,EAAE;AAChD,IAAI,MAAM,GAAG,GAAG,CAAC,EAAE,cAAc,CAAC,cAAc,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC,aAAa,CAAC,CAAC;AACpF,IAAI,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE;AAC/D,YAAY,SAAS,EAAE,cAAc,CAAC,SAAS;AAC/C,SAAS,EAAE,EAAE,cAAc,CAAC,CAAC;AAC7B,IAAI,IAAI,OAAO,cAAc,CAAC,gBAAgB,KAAK,QAAQ,EAAE;AAC7D,QAAQ,OAAO,CAAC,MAAM,CAAC,gBAAgB,GAAG,cAAc,CAAC,gBAAgB,CAAC;AAC1E,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,CAAC,MAAM,CAAC,iBAAiB,GAAG,cAAc,CAAC,gBAAgB,CAAC;AAC3E,KAAK;AACL,IAAI,OAAO,OAAO,CAAC,SAAS,CAAC;AAC7B,IAAI,OAAO,OAAO,CAAC,gBAAgB,CAAC;AACpC,IAAI,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACjC;;ACvGA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,SAAS,CAAC,EAAE,EAAE,cAAc,EAAE;AAC9C;AACA,IAAI,MAAM,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC;AACtC,IAAI,MAAM,GAAG,GAAG,CAAC,EAAE,YAAY,CAAC,cAAc,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;AACtE;AACA,IAAI,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,cAAc,CAAC,CAAC;AACzE;AACA,IAAI,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACjC;;MChCa,WAAW;IAAxB;QAGS,aAAQ,GAAY,KAAK,CAAC;;;QAKzB,aAAQ,GAAQ,EAAE,CAAC;KAoY5B;;;;;IA9XC,OAAO,UAAU;QACf,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;SAClC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;;;;IAKM,aAAa;QAClB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;YAC3C,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACzC;QACD,OAAO,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;aACjD,IAAI,CAAC,CAAC,GAAQ;YACb,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;gBAC7B,OAAO,GAAG,CAAC;aACZ;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;aACtC;SACF,CAAC,CAAC;KACN;IAEM,OAAO;;QACZ,OAAO,CAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,IAAI,KAAI,EAAE,CAAC;KACpC;;IAGM,MAAM;QACX,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;KACjH;;;;;;IAOM,iBAAiB,CAAC,YAAoB;QAC3C,OAAO,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;aACzD,IAAI,CAAC,CAAC,IAAI;;YAET,OAAO,IAAI,CAAC;SACb,CAAC,CAAC;KAEJ;;;;;IAOM,qBAAqB;QAC1B,OAAO;YACL,cAAc,EAAE,YAAY,CAAC,KAAK;YAClC,MAAM,EAAE,GAAG,YAAY,CAAC,SAAS,eAAe;SACjD,CAAC;KACH;;;;;IAMM,oBAAoB;QACzB,QAAQ,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;KAC1I;;;;;;;IAQM,cAAc,CAAC,KAAU,EAAE,GAAG;;QACnC,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,GAAG,CAAC;SACZ;QACD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;QAC7B,MAAM,WAAW,GAAG,MAAA,KAAK,CAAC,MAAM,0CAAE,WAAW,CAAC;;QAG9C,IAAI,SAAS,KAAK,mBAAmB,EAAE;YACrC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;SAChC;aAAM,IAAI,WAAW,EAAE;;YAEtB,GAAG,GAAG,CAAA,MAAA,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO;gBAC7B,OAAO,OAAO,CAAC,IAAI,KAAK,GAAG,CAAC;aAC7B,CAAC,0CAAE,IAAI,KAAI,GAAG,CAAC;SACjB;aAAM,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YACpC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;SAC9B;QACD,OAAO,GAAG,CAAC;KACZ;;;;;;IAOM,aAAa,CAAC,KAAU;QAC7B,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QACD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;QAC7B,OAAQ,wFAAwF,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;KAChI;;;;;IAMM,YAAY,CAAC,GAAQ;QAC1B,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC5E;;;;;;;IAOM,cAAc,CAAC,IAAgC,EAAE,IAAmC;QACzF,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC;QACtB,IAAI,EAAE,IAAI,YAAY,IAAI,CAAC,EAAE;YAC3B,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB;QACD,MAAM,KAAK,GAAG;YACZ,IAAI,EAAE;gBACJ,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS;gBAChB,GAAG,EAAE,SAAS;aACf;YACD,IAAI,EAAE;gBACJ,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,SAAS;aAClB;YACD,QAAQ,EAAE;gBACR,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS;gBAChB,GAAG,EAAE,SAAS;gBACd,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,SAAS;aAClB;SACF,CAAC;QACF,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,EAAE,CAAC;SACX;QACD,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,IAAI,SAAS,EAAE,KAAK,CAAC,IAAI,CAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACnG;;;;;;IAOM,aAAa,CAAC,GAAQ,EAAE,OAAgB,EAAE,YAAsB;QACrE,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,KAAK,CAAC,OAAO,EAAE;YAC5C,OAAO,EAAE,CAAC;SACX;QACD,MAAM,UAAU,GAAG,OAAO,GAAG,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,GAAG,EAAE,IAAI,GAAG,CAAC,CAAC;QAEtF,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,KAAK,GAAG,IAAI,UAAU,KAAK,CAAC,EAAE;YAC5D,MAAM,UAAU,GAAG,CAAC,UAAU,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG;gBAC7C,OAAO,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;aAC9B,CAAC,CAAC;;YAEH,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChB,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;aACzC;YAED,OAAO,GAAG,KAAK,GAAG,CAAC,CAAC;SACrB;QACD,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAEvF,IAAI,YAAY,EAAE;YAChB,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,EAAC,KAAK,EAAC,SAAS,EAAC,CAAC,CAAC,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;KAC9F;;;;;;IAQM,WAAW,CAAC,KAAK;QACtB,IAAI,MAAM,GAAQ,CAAC,CAAC;QACpB,IAAI,IAAI,GAAG,IAAI,CAAC;;;;QAIhB,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE;YAClC,MAAM,GAAG,MAAM,CAAC,CAAC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACpD,IAAI,GAAG,IAAI,CAAC;SACb;aAAM;YACL,MAAM,GAAG,MAAM,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,GAAG,IAAI,CAAC;SACb;;;;QAID,OAAO,MAAM,GAAG,IAAI,CAAC;KAEtB;;IAGM,mBAAmB,CAAC,GAAW;QACpC,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAEhB,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAChD,eAAe,GAAG,EAAE,CAAC;QACvB,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK;;gBAEpB,IAAI,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;oBACzC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC7B;aACF,CAAC,CAAC;SACJ;QACD,OAAO,eAAe,CAAC;KACxB;;;;;IAMM,aAAa,CAAC,IAAY;QAC/B,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK;YACrB,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;gBACnB,MAAM,IAAI,GAAG,CAAC;aACf;iBAAM;gBACL,MAAM,IAAI,KAAK,GAAG,GAAG,GAAG,MAAM,CAAC;aAChC;SACF,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACf;;;;IAKM,2BAA2B;QAChC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC;QACnD,MAAM,WAAW,GAAG,CAAC,4BAA4B,CAAC,CAAC;QACnD,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI;YAC5B,OAAO,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACvC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,CAAC;KAClC;;;;;IAMM,WAAW,CAAC,GAAQ,EAAE,MAAc;QACzC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE;YACnB,OAAO;SACR;QACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;KAC7B;;;;;;IAMO,WAAW,CAAC,GAAY;QAC9B,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;KAC3B;;;;;;;;;IAUQ,cAAc,CAAC,CAAS,EAAE,CAAS;;;;;QAK3C,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACX,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAEX,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QAED,IAAI,CAAC,EAAE,IAAI,CAAC;QACZ,MAAM,WAAW,GAAG,UAAU,CAAC;QAC/B,MAAM,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxD,MAAM,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxD,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACtB,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC/D,IAAI,IAAI,EAAE;gBACR,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;KAC5C;;;;;;;;;;;IAaQ,iBAAiB,CAAC,aAAqB;QAC7C,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,EAAE,CAAC;SACX;QAED,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;;;;;QAKD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,OAAO,MAAM,CAAC;SACf;QACD,OAAO,EAAE,CAAC;KACX;;;;;","names":["FormData"],"sources":["node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js","node_modules/@esri/arcgis-rest-form-data/browser-ponyfill.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js","node_modules/@esri/arcgis-rest-fetch/browser-ponyfill.js","node_modules/@esri/arcgis-rest-request/dist/esm/request.js","node_modules/@esri/arcgis-rest-request/dist/esm/utils/clean-url.js","node_modules/@esri/arcgis-rest-portal/dist/esm/util/get-portal-url.js","node_modules/@esri/arcgis-rest-portal/dist/esm/items/get.js","node_modules/@esri/arcgis-rest-portal/dist/esm/util/get-portal.js","src/services/util.service.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params) {\n    return Object.keys(params).some((key) => {\n        let value = params[key];\n        if (!value) {\n            return false;\n        }\n        if (value && value.toParam) {\n            value = value.toParam();\n        }\n        const type = value.constructor.name;\n        switch (type) {\n            case \"Array\":\n                return false;\n            case \"Object\":\n                return false;\n            case \"Date\":\n                return false;\n            case \"Function\":\n                return false;\n            case \"Boolean\":\n                return false;\n            case \"String\":\n                return false;\n            case \"Number\":\n                return false;\n            default:\n                return true;\n        }\n    });\n}\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params) {\n    const newParams = {};\n    Object.keys(params).forEach((key) => {\n        var _a, _b;\n        let param = params[key];\n        if (param && param.toParam) {\n            param = param.toParam();\n        }\n        if (!param &&\n            param !== 0 &&\n            typeof param !== \"boolean\" &&\n            typeof param !== \"string\") {\n            return;\n        }\n        const type = param.constructor.name;\n        let value;\n        // properly encodes objects, arrays and dates for arcgis.com and other services.\n        // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n        // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n        // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n        switch (type) {\n            case \"Array\":\n                // Based on the first element of the array, classify array as an array of arrays, an array of objects\n                // to be stringified, or an array of non-objects to be comma-separated\n                // eslint-disable-next-line no-case-declarations\n                const firstElementType = (_b = (_a = param[0]) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name;\n                value =\n                    firstElementType === \"Array\"\n                        ? param // pass thru array of arrays\n                        : firstElementType === \"Object\"\n                            ? JSON.stringify(param) // stringify array of objects\n                            : param.join(\",\"); // join other types of array elements\n                break;\n            case \"Object\":\n                value = JSON.stringify(param);\n                break;\n            case \"Date\":\n                value = param.valueOf();\n                break;\n            case \"Function\":\n                value = null;\n                break;\n            case \"Boolean\":\n                value = param + \"\";\n                break;\n            default:\n                value = param;\n                break;\n        }\n        if (value ||\n            value === 0 ||\n            typeof value === \"string\" ||\n            Array.isArray(value)) {\n            newParams[key] = value;\n        }\n    });\n    return newParams;\n}\n//# sourceMappingURL=process-params.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { processParams } from \"./process-params.js\";\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nexport function encodeParam(key, value) {\n    // For array of arrays, repeat key=value for each element of containing array\n    if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n        return value\n            .map((arrayElem) => encodeParam(key, arrayElem))\n            .join(\"&\");\n    }\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params) {\n    const newParams = processParams(params);\n    return Object.keys(newParams)\n        .map((key) => {\n        return encodeParam(key, newParams[key]);\n    })\n        .join(\"&\");\n}\n//# sourceMappingURL=encode-query-string.js.map","module.exports = {\n  FormData: globalThis.FormData,\n  File: globalThis.File,\n  Blob: globalThis.Blob\n};\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { processParams, requiresFormData } from \"./process-params.js\";\nimport { encodeQueryString } from \"./encode-query-string.js\";\nimport { FormData } from \"@esri/arcgis-rest-form-data\";\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(params, forceFormData) {\n    // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n    const useFormData = requiresFormData(params) || forceFormData;\n    const newParams = processParams(params);\n    if (useFormData) {\n        const formData = new FormData();\n        Object.keys(newParams).forEach((key) => {\n            if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n                /* To name the Blob:\n                 1. look to an alternate request parameter called 'fileName'\n                 2. see if 'name' has been tacked onto the Blob manually\n                 3. if all else fails, use the request parameter\n                */\n                const filename = newParams[\"fileName\"] || newParams[key].name || key;\n                formData.append(key, newParams[key], filename);\n            }\n            else {\n                formData.append(key, newParams[key]);\n            }\n        });\n        return formData;\n    }\n    else {\n        return encodeQueryString(params);\n    }\n}\n//# sourceMappingURL=encode-form-data.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * This represents a generic error from an ArcGIS endpoint. There will be details about the error in the {@linkcode ArcGISRequestError.message},  {@linkcode ArcGISRequestError.originalMessage} properties on the error. You\n * can also access the original server response at  {@linkcode ArcGISRequestError.response} which may have additional details.\n *\n * ```js\n * request(someUrl, someOptions).catch(e => {\n *   if(e.name === \"ArcGISRequestError\") {\n *     console.log(\"Something went wrong with the request:\", e);\n *     console.log(\"Full server response\", e.response);\n *   }\n * })\n * ```\n */\nexport class ArcGISRequestError extends Error {\n    /**\n     * Create a new `ArcGISRequestError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options and parameters of the request\n     */\n    constructor(message, code, response, url, options) {\n        // 'Error' breaks prototype chain here\n        super(message);\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n        message = message || \"UNKNOWN_ERROR\";\n        code = code || \"UNKNOWN_ERROR_CODE\";\n        this.name = \"ArcGISRequestError\";\n        this.message =\n            code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n        this.originalMessage = message;\n        this.code = code;\n        this.response = response;\n        this.url = url;\n        this.options = options;\n    }\n}\n//# sourceMappingURL=ArcGISRequestError.js.map","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message) {\n    if (console && console.warn) {\n        console.warn.apply(console, [message]);\n    }\n}\n//# sourceMappingURL=warn.js.map","module.exports.getFetch = function getFetch() {\n  return Promise.resolve({\n    fetch: globalThis.fetch,\n    Headers: globalThis.Headers,\n    Response: globalThis.Response,\n    Request: globalThis.request\n  });\n};\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { encodeFormData } from \"./utils/encode-form-data.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { requiresFormData } from \"./utils/process-params.js\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError.js\";\nimport { warn } from \"./utils/warn.js\";\nimport { getFetch } from \"@esri/arcgis-rest-fetch\";\nexport const NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n *\n * setDefaultRequestOptions({\n *   authentication: ArcGISIdentityManager // all requests will use this session by default\n * })\n * ```\n *\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nexport function setDefaultRequestOptions(options, hideWarnings) {\n    if (options.authentication && !hideWarnings) {\n        warn(\"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\");\n    }\n    globalThis.DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\nexport function getDefaultRequestOptions() {\n    return (globalThis.DEFAULT_ARCGIS_REQUEST_OPTIONS || {\n        httpMethod: \"POST\",\n        params: {\n            f: \"json\"\n        }\n    });\n}\n/**\n * This error is thrown when a request encounters an invalid token error. Requests that use {@linkcode ArcGISIdentityManager} or\n * {@linkcode ApplicationCredentialsManager} in the `authentication` option the authentication manager will automatically try to generate\n * a fresh token using either {@linkcode ArcGISIdentityManager.refreshCredentials} or\n * {@linkcode ApplicationCredentialsManager.refreshCredentials}. If the request with the new token fails you will receive an `ArcGISAuthError`\n * if refreshing the token fails you will receive an instance of {@linkcode ArcGISTokenRequestError}.\n *\n * ```js\n * request(someUrl, {\n *   authentication: identityManager,\n *   // some additional options...\n * }).catch(e => {\n *   if(e.name === \"ArcGISAuthError\") {\n *     console.log(\"Request with a new token failed you might want to have the user authorize again.\")\n *   }\n *\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     console.log(\"There was an error refreshing the token you might want to have the user authorize again.\")\n *   }\n * })\n * ```\n */\nexport class ArcGISAuthError extends ArcGISRequestError {\n    /**\n     * Create a new `ArcGISAuthError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options of the request\n     */\n    constructor(message = \"AUTHENTICATION_ERROR\", code = \"AUTHENTICATION_ERROR_CODE\", response, url, options) {\n        super(message, code, response, url, options);\n        this.name = \"ArcGISAuthError\";\n        this.message =\n            code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n    }\n    retry(getSession, retryLimit = 1) {\n        let tries = 0;\n        const retryRequest = (resolve, reject) => {\n            tries = tries + 1;\n            getSession(this.url, this.options)\n                .then((session) => {\n                const newOptions = Object.assign(Object.assign({}, this.options), { authentication: session });\n                return internalRequest(this.url, newOptions);\n            })\n                .then((response) => {\n                resolve(response);\n            })\n                .catch((e) => {\n                if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n                    retryRequest(resolve, reject);\n                }\n                else if (e.name === this.name &&\n                    e.message === this.message &&\n                    tries >= retryLimit) {\n                    reject(this);\n                }\n                else {\n                    reject(e);\n                }\n            });\n        };\n        return new Promise((resolve, reject) => {\n            retryRequest(resolve, reject);\n        });\n    }\n}\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(response, url, params, options, originalAuthError) {\n    // this is an error message from billing.arcgis.com backend\n    if (response.code >= 400) {\n        const { message, code } = response;\n        throw new ArcGISRequestError(message, code, response, url, options);\n    }\n    // error from ArcGIS Online or an ArcGIS Portal or server instance.\n    if (response.error) {\n        const { message, code, messageCode } = response.error;\n        const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n        if (code === 498 || code === 499) {\n            if (originalAuthError) {\n                throw originalAuthError;\n            }\n            else {\n                throw new ArcGISAuthError(message, errorCode, response, url, options);\n            }\n        }\n        throw new ArcGISRequestError(message, errorCode, response, url, options);\n    }\n    // error from a status check\n    if (response.status === \"failed\" || response.status === \"failure\") {\n        let message;\n        let code = \"UNKNOWN_ERROR_CODE\";\n        try {\n            message = JSON.parse(response.statusMessage).message;\n            code = JSON.parse(response.statusMessage).code;\n        }\n        catch (e) {\n            message = response.statusMessage || response.message;\n        }\n        throw new ArcGISRequestError(message, code, response, url, options);\n    }\n    return response;\n}\n/**\n * This is the internal implementation of `request` without the automatic retry behavior to prevent\n * infinite loops when a server continues to return invalid token errors.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n * @internal\n */\nexport function internalRequest(url, requestOptions) {\n    const defaults = getDefaultRequestOptions();\n    const options = Object.assign(Object.assign(Object.assign({ httpMethod: \"POST\" }, defaults), requestOptions), {\n        params: Object.assign(Object.assign({}, defaults.params), requestOptions.params),\n        headers: Object.assign(Object.assign({}, defaults.headers), requestOptions.headers)\n    });\n    const { httpMethod, rawResponse } = options;\n    const params = Object.assign({ f: \"json\" }, options.params);\n    let originalAuthError = null;\n    const fetchOptions = {\n        method: httpMethod,\n        signal: options.signal,\n        /* ensures behavior mimics XMLHttpRequest.\n        needed to support sending IWA cookies */\n        credentials: options.credentials || \"same-origin\"\n    };\n    // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n    // and that request needs to send cookies cross domain\n    // so we need to set the credentials to \"include\"\n    if (options.headers &&\n        options.headers[\"X-Esri-Auth-Client-Id\"] &&\n        url.indexOf(\"/oauth2/platformSelf\") > -1) {\n        fetchOptions.credentials = \"include\";\n    }\n    let authentication;\n    // Check to see if this is a raw token as a string and create a IAuthenticationManager like object for it.\n    // Otherwise this just assumes that options.authentication is an IAuthenticationManager.\n    if (typeof options.authentication === \"string\") {\n        const rawToken = options.authentication;\n        authentication = {\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            getToken: () => {\n                return Promise.resolve(rawToken);\n            }\n        };\n        /* istanbul ignore else - we don't need to test NOT warning people */\n        if (!options.authentication.startsWith(\"AAPK\") && // doesn't look like an API Key\n            !options.suppressWarnings && // user doesn't want to suppress warnings for this request\n            !globalThis.ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING // we havn't shown the user this warning yet\n        ) {\n            warn(`Using an oAuth 2.0 access token directly in the token option is discouraged. Consider using ArcGISIdentityManager or Application session. See https://esriurl.com/arcgis-rest-js-direct-token-warning for more information.`);\n            globalThis.ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING = true;\n        }\n    }\n    else {\n        authentication = options.authentication;\n    }\n    // for errors in GET requests we want the URL passed to the error to be the URL before\n    // query params are applied.\n    const originalUrl = url;\n    return (authentication\n        ? authentication.getToken(url).catch((err) => {\n            /**\n             * append original request url and requestOptions\n             * to the error thrown by getToken()\n             * to assist with retrying\n             */\n            err.url = url;\n            err.options = options;\n            /**\n             * if an attempt is made to talk to an unfederated server\n             * first try the request anonymously. if a 'token required'\n             * error is thrown, throw the UNFEDERATED error then.\n             */\n            originalAuthError = err;\n            return Promise.resolve(\"\");\n        })\n        : Promise.resolve(\"\"))\n        .then((token) => {\n        if (token.length) {\n            params.token = token;\n        }\n        if (authentication && authentication.getDomainCredentials) {\n            fetchOptions.credentials = authentication.getDomainCredentials(url);\n        }\n        // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n        const requestHeaders = {};\n        if (fetchOptions.method === \"GET\") {\n            // Prevents token from being passed in query params when hideToken option is used.\n            /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n            if (params.token &&\n                options.hideToken &&\n                // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n                typeof window === \"undefined\") {\n                requestHeaders[\"X-Esri-Authorization\"] = `Bearer ${params.token}`;\n                delete params.token;\n            }\n            // encode the parameters into the query string\n            const queryParams = encodeQueryString(params);\n            // dont append a '?' unless parameters are actually present\n            const urlWithQueryString = queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n            if (\n            // This would exceed the maximum length for URLs specified by the consumer and requires POST\n            (options.maxUrlLength &&\n                urlWithQueryString.length > options.maxUrlLength) ||\n                // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n                (params.token && options.hideToken)) {\n                // the consumer specified a maximum length for URLs\n                // and this would exceed it, so use post instead\n                fetchOptions.method = \"POST\";\n                // If the token was already added as a Auth header, add the token back to body with other params instead of header\n                if (token.length && options.hideToken) {\n                    params.token = token;\n                    // Remove existing header that was added before url query length was checked\n                    delete requestHeaders[\"X-Esri-Authorization\"];\n                }\n            }\n            else {\n                // just use GET\n                url = urlWithQueryString;\n            }\n        }\n        /* updateResources currently requires FormData even when the input parameters dont warrant it.\n    https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n        see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n        const forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n        if (fetchOptions.method === \"POST\") {\n            fetchOptions.body = encodeFormData(params, forceFormData);\n        }\n        // Mixin headers from request options\n        fetchOptions.headers = Object.assign(Object.assign({}, requestHeaders), options.headers);\n        // This should have the same conditional for Node JS as ArcGISIdentityManager.refreshWithUsernameAndPassword()\n        // to ensure that generated tokens have the same referer when used in Node with a username and password.\n        /* istanbul ignore next - karma reports coverage on browser tests only */\n        if ((typeof window === \"undefined\" ||\n            (window && typeof window.document === \"undefined\")) &&\n            !fetchOptions.headers.referer) {\n            fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n        }\n        /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n        if (!requiresFormData(params) && !forceFormData) {\n            fetchOptions.headers[\"Content-Type\"] =\n                \"application/x-www-form-urlencoded\";\n        }\n        /**\n         * Check for a global fetch first and use it if available. This allows us to use the default\n         * configuration of fetch-mock in tests.\n         */\n        /* istanbul ignore next coverage is based on browser code and we don't test for the absence of global fetch so we can skip the else here. */\n        return globalThis.fetch\n            ? globalThis.fetch(url, fetchOptions)\n            : getFetch().then(({ fetch }) => {\n                return fetch(url, fetchOptions);\n            });\n    })\n        .then((response) => {\n        // the request got back an error status code (4xx, 5xx)\n        if (!response.ok) {\n            // we need to determine if the server returned a JSON body with more details.\n            // this is the format used by newer services such as the Places and Style service.\n            return response\n                .json()\n                .then((jsonError) => {\n                // The body can be parsed as JSON\n                const { status, statusText } = response;\n                const { message, details } = jsonError.error;\n                const formattedMessage = `${message}. ${details ? details.join(\" \") : \"\"}`.trim();\n                throw new ArcGISRequestError(formattedMessage, `HTTP ${status} ${statusText}`, jsonError, url, options);\n            })\n                .catch((e) => {\n                // if we already were about to format this as an ArcGISRequestError throw that error\n                if (e.name === \"ArcGISRequestError\") {\n                    throw e;\n                }\n                // server responded w/ an actual error (404, 500, etc) but we could not parse it as JSON\n                const { status, statusText } = response;\n                throw new ArcGISRequestError(statusText, `HTTP ${status}`, response, url, options);\n            });\n        }\n        if (rawResponse) {\n            return response;\n        }\n        switch (params.f) {\n            case \"json\":\n                return response.json();\n            case \"geojson\":\n                return response.json();\n            case \"html\":\n                return response.text();\n            case \"text\":\n                return response.text();\n            /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n            default:\n                return response.blob();\n        }\n    })\n        .then((data) => {\n        // Check for an error in the JSON body of a successful response.\n        // Most ArcGIS Server services will return a successful status code but include an error in the response body.\n        if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n            const response = checkForErrors(data, originalUrl, params, options, originalAuthError);\n            if (originalAuthError) {\n                /* If the request was made to an unfederated service that\n                didn't require authentication, add the base url and a dummy token\n                to the list of trusted servers to avoid another federation check\n                in the event of a repeat request */\n                const truncatedUrl = url\n                    .toLowerCase()\n                    .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n                options.authentication.federatedServers[truncatedUrl] = {\n                    token: [],\n                    // default to 24 hours\n                    expires: new Date(Date.now() + 86400 * 1000)\n                };\n                originalAuthError = null;\n            }\n            return response;\n        }\n        else {\n            return data;\n        }\n    });\n}\n/**\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n *\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n *\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n *\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(url, requestOptions = { params: { f: \"json\" } }) {\n    return internalRequest(url, requestOptions).catch((e) => {\n        if (e instanceof ArcGISAuthError &&\n            requestOptions.authentication &&\n            typeof requestOptions.authentication !== \"string\" &&\n            requestOptions.authentication.canRefresh &&\n            requestOptions.authentication.refreshCredentials) {\n            return e.retry(() => {\n                return requestOptions.authentication.refreshCredentials();\n            }, 1);\n        }\n        else {\n            return Promise.reject(e);\n        }\n    });\n}\n//# sourceMappingURL=request.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nexport function cleanUrl(url) {\n    // Guard so we don't try to trim something that's not a string\n    if (typeof url !== \"string\") {\n        return url;\n    }\n    // trim leading and trailing spaces, but not spaces inside the url\n    url = url.trim();\n    // remove the trailing slash to the url if one was included\n    if (url[url.length - 1] === \"/\") {\n        url = url.slice(0, -1);\n    }\n    return url;\n}\n//# sourceMappingURL=clean-url.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { cleanUrl } from \"@esri/arcgis-rest-request\";\n/**\n * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n * precedence over `authentication.portal`. If neither `portal` nor `authentication` is present,\n * `www.arcgis.com/sharing/rest` is returned.\n *\n * @param requestOptions - Request options that may have authentication manager\n * @returns Portal url to be used in API requests\n */\nexport function getPortalUrl(requestOptions = {}) {\n    // use portal in options if specified\n    if (requestOptions.portal) {\n        return cleanUrl(requestOptions.portal);\n    }\n    // if auth was passed, use that portal\n    if (requestOptions.authentication &&\n        typeof requestOptions.authentication !== \"string\") {\n        // the portal url is already scrubbed in the auth package\n        return requestOptions.authentication.portal;\n    }\n    // default to arcgis.com\n    return \"https://www.arcgis.com/sharing/rest\";\n}\n//# sourceMappingURL=get-portal-url.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport { scrubControlChars } from \"../util/scrub-control-chars.js\";\nimport { determineOwner } from \"./helpers.js\";\n/**\n * ```\n * import { getItem } from \"@esri/arcgis-rest-portal\";\n * //\n * getItem(\"ae7\")\n *   .then(response);\n * // or\n * getItem(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.\n *\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function getItem(id, requestOptions) {\n    const url = getItemBaseUrl(id, requestOptions);\n    // default to a GET request\n    const options = Object.assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options);\n}\n/**\n * Get the fully qualified base URL to the REST end point for an item.\n * @param id Item Id\n * @param portalUrlOrRequestOptions a portal URL or request options\n * @returns URL to the item's REST end point, defaults to `https://www.arcgis.com/sharing/rest/content/items/{id}`\n */\nexport const getItemBaseUrl = (id, portalUrlOrRequestOptions) => {\n    const portalUrl = typeof portalUrlOrRequestOptions === \"string\"\n        ? portalUrlOrRequestOptions\n        : getPortalUrl(portalUrlOrRequestOptions);\n    return `${portalUrl}/content/items/${id}`;\n};\n/**\n * ```\n * import { getItemData } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemData(\"ae7\")\n *   .then(response)\n * // or\n * getItemData(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get the /data for an item. If no data exists, returns `undefined`. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the json data for the item.\n */\nexport function getItemData(id, requestOptions) {\n    const url = `${getItemBaseUrl(id, requestOptions)}/data`;\n    // default to a GET request\n    const options = Object.assign({ httpMethod: \"GET\", params: {} }, requestOptions);\n    if (options.file) {\n        options.params.f = null;\n    }\n    return request(url, options).catch((err) => {\n        /* if the item doesn't include data, the response will be empty\n           and the internal call to response.json() will fail */\n        const emptyResponseErr = RegExp(/The string did not match the expected pattern|(Unexpected end of (JSON input|data at line 1 column 1))/i);\n        /* istanbul ignore else */\n        if (emptyResponseErr.test(err.message)) {\n            return;\n        }\n        else\n            throw err;\n    });\n}\n/**\n * ```\n * import { getRelatedItems } from \"@esri/arcgis-rest-portal\";\n * //\n * getRelatedItems({\n *   id: \"ae7\",\n *   relationshipType: \"Service2Layer\" // or several [\"Service2Layer\", \"Map2Area\"]\n * })\n *   .then(response)\n * ```\n * Get the related items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/related-items.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getRelatedItems(requestOptions) {\n    const url = `${getItemBaseUrl(requestOptions.id, requestOptions)}/relatedItems`;\n    const options = Object.assign({ httpMethod: \"GET\", params: {\n            direction: requestOptions.direction\n        } }, requestOptions);\n    if (typeof requestOptions.relationshipType === \"string\") {\n        options.params.relationshipType = requestOptions.relationshipType;\n    }\n    else {\n        options.params.relationshipTypes = requestOptions.relationshipType;\n    }\n    delete options.direction;\n    delete options.relationshipType;\n    return request(url, options);\n}\n/**\n * Get the resources associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getItemResources(id, requestOptions) {\n    const url = `${getItemBaseUrl(id, requestOptions)}/resources`;\n    // Mix in num:1000 with any user supplied params\n    // Key thing - we don't want to mutate the passed in requestOptions\n    // as that may be used in other (subsequent) calls in the course\n    // of a long promise chains\n    const options = Object.assign({}, requestOptions);\n    options.params = Object.assign({ num: 1000 }, options.params);\n    return request(url, options);\n}\n/**\n * Fetches an item resource and optionally parses it to the correct format.\n *\n * Provides JSON parse error protection by sanitizing out any unescaped control characters before parsing that would otherwise cause an error to be thrown.\n *\n * ```js\n * import { getItemResource } from \"@esri/arcgis-rest-portal\";\n *\n * // Parses contents as blob by default\n * getItemResource(\"3ef\", { fileName: \"resource.jpg\", ...})\n *  .then(resourceContents => {});\n *\n * // Can override parse method\n * getItemResource(\"3ef\", { fileName: \"resource.json\", readAs: 'json', ...})\n *  .then(resourceContents => {});\n *\n * // Get the response object instead\n * getItemResource(\"3ef\",{ rawResponse: true, fileName: \"resource.json\" })\n *  .then(response => {})\n * ```\n *\n * @param {string} itemId\n * @param {IGetItemResourceOptions} requestOptions\n */\nexport function getItemResource(itemId, requestOptions) {\n    const readAs = requestOptions.readAs || \"blob\";\n    return getItemFile(itemId, `/resources/${requestOptions.fileName}`, readAs, requestOptions);\n}\n/**\n * Lists the groups of which the item is a part, only showing the groups that the calling user can access. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/groups.htm) for more information.\n *\n * ```js\n * import { getItemGroups } from \"@esri/arcgis-rest-portal\";\n *\n * getItemGroups(\"30e5fe3149c34df1ba922e6f5bbf808f\")\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to query group association for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item groups.\n */\nexport function getItemGroups(id, requestOptions) {\n    const url = `${getItemBaseUrl(id, requestOptions)}/groups`;\n    return request(url, requestOptions);\n}\n/**\n * Inquire about status when publishing an item, adding an item in async mode, or adding with a multipart upload. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/status.htm) for more information.\n *\n * ```js\n * import { getItemStatus } from \"@esri/arcgis-rest-portal\";\n *\n * getItemStatus({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to get status for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item status.\n */\nexport function getItemStatus(requestOptions) {\n    return determineOwner(requestOptions).then((owner) => {\n        const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${requestOptions.id}/status`;\n        const options = appendCustomParams(requestOptions, [\"jobId\", \"jobType\"], { params: Object.assign({}, requestOptions.params) });\n        return request(url, options);\n    });\n}\n/**\n * Lists the part numbers of the file parts that have already been uploaded in a multipart file upload. This method can be used to verify the parts that have been received as well as those parts that were not received by the server. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/parts.htm) for more information.\n *\n * ```js\n * import { getItemParts } from \"@esri/arcgis-rest-portal\";\n *\n * getItemParts({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to get part list.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item part list.\n */\nexport function getItemParts(requestOptions) {\n    return determineOwner(requestOptions).then((owner) => {\n        const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${requestOptions.id}/parts`;\n        return request(url, requestOptions);\n    });\n}\n/**\n * ```\n * import { getItemInfo } from \"@esri/arcgis-rest-portal\";\n * // get the \"Info Card\" for the item\n * getItemInfo(\"ae7\")\n *   .then(itemInfoXml) // XML document as a string\n * // or get the contents of a specific file\n * getItemInfo(\"ae7\", { fileName: \"form.json\", readAs: \"json\", authentication })\n *   .then(formJson) // JSON document as JSON\n * ```\n * Get an info file for an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-info-file.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request, including the file name which defaults to `iteminfo.xml`.\n * If the file is not a text file (XML, HTML, etc) you will need to specify the `readAs` parameter\n * @returns A Promise that will resolve with the contents of the info file for the item.\n */\nexport function getItemInfo(id, requestOptions) {\n    const { fileName = \"iteminfo.xml\", readAs = \"text\" } = requestOptions || {};\n    const options = Object.assign({ httpMethod: \"GET\" }, requestOptions);\n    return getItemFile(id, `/info/${fileName}`, readAs, options);\n}\n/**\n * ```\n * import { getItemMetadata } from \"@esri/arcgis-rest-portal\";\n * // get the metadata for the item\n * getItemMetadata(\"ae7\")\n *   .then(itemMetadataXml) // XML document as a string\n * // or with additional request options\n * getItemMetadata(\"ae7\", { authentication })\n *   .then(itemMetadataXml) // XML document as a string\n * ```\n * Get the standard formal metadata XML file for an item (`/info/metadata/metadata.xml`)\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the contents of the metadata file for the item as a string.\n */\nexport function getItemMetadata(id, requestOptions) {\n    const options = Object.assign(Object.assign({}, requestOptions), { fileName: \"metadata/metadata.xml\" });\n    return getItemInfo(id, options);\n}\n// overrides request()'s default behavior for reading the response\n// which is based on `params.f` and defaults to JSON\n// Also adds JSON parse error protection by sanitizing out any unescaped control characters before parsing\nfunction getItemFile(id, \n// NOTE: fileName should include any folder/subfolders\nfileName, readMethod, requestOptions) {\n    const url = `${getItemBaseUrl(id, requestOptions)}${fileName}`;\n    // preserve escape hatch to let the consumer read the response\n    // and ensure the f param is not appended to the query string\n    const options = Object.assign({ params: {} }, requestOptions);\n    const justReturnResponse = options.rawResponse;\n    options.rawResponse = true;\n    options.params.f = null;\n    return request(url, options).then((response) => {\n        if (justReturnResponse) {\n            return response;\n        }\n        return readMethod !== \"json\"\n            ? response[readMethod]()\n            : response\n                .text()\n                .then((text) => JSON.parse(scrubControlChars(text)));\n    });\n}\n//# sourceMappingURL=get.js.map","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"./get-portal-url.js\";\n/**\n * Get the portal\n * @param requestOptions\n */\nexport function getSelf(requestOptions) {\n    // just delegate to getPortal w/o an id\n    return getPortal(null, requestOptions);\n}\n/**\n * Fetch information about the specified portal by id. If no id is passed, portals/self will be called.\n *\n * If you intend to request a portal by id and it is different from the portal specified by options.authentication, you must also pass options.portal.\n *\n *  ```js\n * import { getPortal } from \"@esri/arcgis-rest-portal\";\n * //\n * getPortal()\n * getPortal(\"fe8\")\n * getPortal(null, { portal: \"https://custom.maps.arcgis.com/sharing/rest/\" })\n * ```\n *\n * @param id\n * @param requestOptions\n */\nexport function getPortal(id, requestOptions) {\n    // construct the search url\n    const idOrSelf = id ? id : \"self\";\n    const url = `${getPortalUrl(requestOptions)}/portals/${idOrSelf}`;\n    // default to a GET request\n    const options = Object.assign({ httpMethod: \"GET\" }, requestOptions);\n    // send the request\n    return request(url, options);\n}\n//# sourceMappingURL=get-portal.js.map","import { PropsService } from './props.service';\nimport { IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { getPortal, getItem } from \"@esri/arcgis-rest-portal\";\n\nexport class UtilService {\n  static service: UtilService;\n\n  public isPortal: boolean = false;\n  private portalInfo: any;\n  // private surveyItemInfo: any;\n\n  // store all the svg for icon component\n  private svgCache: any = {};\n\n  /**\n   * get Service\n   * @returns \n   */\n  static getService(): UtilService {\n    if (!this.service) {\n      this.service = new UtilService();\n    }\n    return this.service;\n  }\n\n  /**\n   * get portalInfo\n   */\n  public getPortalInfo(): Promise<any> {\n    if (this.portalInfo && this.portalInfo.user) {\n      return Promise.resolve(this.portalInfo);\n    }\n    return getPortal(null, this.getBaseRequestOptions())\n      .then((res: any) => {\n        if (!res.error) {\n          this.portalInfo = res;\n          this.isPortal = res.isPortal;\n          return res;\n        } else {\n          throw new Error(JSON.stringify(res));\n        }\n      });\n  }\n\n  public getUser() {\n    return this.portalInfo?.user || {};\n  }\n\n  // set dir\n  public setDir() {\n    document.getElementsByTagName('html')[0].dir = ['ar', 'he'].indexOf(PropsService.locale) !== -1 ? 'rtl' : 'ltr';\n  }\n\n  /**\n   * \n   * @param surveyItemId \n   * @returns \n   */\n  public getSurveyItemInfo(surveyItemId: string) {\n    return getItem(surveyItemId, this.getBaseRequestOptions())\n    .then((info) => {\n      // this.surveyItemInfo = info;\n      return info;\n    });\n\n  }\n  \n\n  /**\n   * getBaseRequestOptions\n   * @returns \n   */\n  public getBaseRequestOptions(): IRequestOptions {\n    return {\n      authentication: PropsService.token,\n      portal: `${PropsService.portalUrl}/sharing/rest`\n    };\n  }\n\n  /**\n   * supportFeatureReport\n   * @returns \n   */\n  public supportFeatureReport() {\n    return (!this.isPortal || (this.isPortal && this.compareVersion(this.portalInfo.currentVersion, this.getRestApiVersion('10.5.0')) >= 0));\n  }\n\n  /**\n   * format fieldtype\n   * @param fieldType \n   * @param val \n   * @returns \n   */\n  public formatFieldVal(field: any, val) {\n    if (!val) {\n      return val;\n    }\n    const fieldType = field.type;\n    const codedValues = field.domain?.codedValues;\n    \n    // date field\n    if (fieldType === 'esriFieldTypeDate') {\n      val = this.formatDateTime(val);\n    } else if (codedValues) {\n      // has coded value\n      val = codedValues.find((codeVal) => {\n        return codeVal.code === val;\n      })?.name || val;\n    } else if (this.isNumberField(field)) {\n      val = this.formatNumber(val);\n    } \n    return val;\n  }\n\n  /**\n   * is number field type\n   * @param field \n   * @returns \n   */\n  public isNumberField(field: any) {\n    if (!field) {\n      return false;\n    }\n    const fieldType = field.type;\n    return  'esriFieldTypeSingle,esriFieldTypeDouble,esriFieldTypeInteger,esriFieldTypeSmallInteger'.split(',').includes(fieldType)\n  }\n\n  /**\n   * format number\n   * @param num \n   */\n  public formatNumber(num: any) {\n    return new Intl.NumberFormat(PropsService.locale || 'default').format(num);\n  }\n  /**\n   * format date/time/datetime\n   * @param date \n   * @param type \n   * @param options \n   */\n  public formatDateTime(date: Date | 'string' | 'number', type?: 'date' | 'time' | 'datetime') {\n    type = type || 'date';\n    if (!(date instanceof Date)) {\n      date = new Date(date);\n    }\n    const parms = {\n      date: {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n      },\n      time: {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n      },\n      datetime: {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n      }\n    };\n    if (!date) {\n      return '';\n    }\n    return new Intl.DateTimeFormat(PropsService.locale || 'default', parms[type] as any).format(date);\n  }\n\n  /**\n   * But need to check the new percentage pipe support to show the value like 99.999999999%\n   * @param percent \n   * @param returnNumber \n   */\n  public getPercentage(job: any, percent?: number, returnNumber?: boolean) {\n    let numberVal = 0;\n    if ((!job || !job.jobStatusInfo) && !percent) {\n      return '';\n    }\n    const percentage = percent ? percent : Number(job.jobStatusInfo.progress + '' || '0');\n\n    let decimal = 1;\n    if (Math.round(percentage * 100) === 100 && percentage !== 1) {\n      const decimalStr = (percentage + '').substr(3);\n      let index = decimalStr.split('').findIndex((str) => {\n        return parseInt(str, 10) < 9;\n      });\n      // if the last number is still 9, use str length\n      if (index === -1) {\n        index = decimalStr.split('').length - 1;\n      }\n\n      decimal = index + 1;\n    }\n    numberVal = Math.round(percentage * Math.pow(10, decimal + 2)) / Math.pow(10, decimal);\n\n    if (returnNumber) {\n      return numberVal;\n    }\n    return new Intl.NumberFormat(PropsService.locale, {style:'percent'}).format(numberVal / 100); // percentage  + '%';  \n  }\n\n\n  /**\n   * getFileSize\n   * @param bytes \n   * @returns \n   */\n  public getFileSize(bytes) {\n    let result: any = 0;\n    let type = 'KB';\n    // if (bytes && bytes > (1024 * 1024 * 1024)) {\n    //   result = (bytes / (1024 * 1024 * 1024)).toFixed(1) + 'GB';\n    // } else\n    if (bytes && bytes > (1024 * 1024)) {\n      result = Number((bytes / (1024 * 1024)).toFixed(1)); // + 'MB';\n      type = 'MB';\n    } else {\n      result = Number((bytes / (1024)).toFixed(1)); // + 'KB';\n      type = 'KB';\n    }\n    //  else {\n    //   result = (bytes).toFixed(1) + 'B';\n    // }\n    return result + type;\n\n  }\n\n  // remove placeholders in output file name expression\n  public extractPlaceholders(exp: string) {\n    exp = exp || '';\n\n    const matches = exp.match(/\\$[^{$]*?{[^}]*?.*?}/g),\n      returnedMatches = [];\n    if (matches) {\n      matches.forEach((match) => {\n        // if not duplicate, push it\n        if (returnedMatches.indexOf(match) === -1) {\n          returnedMatches.push(match);\n        }\n      });\n    }\n    return returnedMatches;\n  }\n\n  /**\n   * parse markdown,\n   * eg: convert 'Failed to parse `${tag}` and `${tag}`' to 'Failed to parse <i>${tag}</i> and <i>${tag}</i>'\n   */\n  public parseMarkdown(html: string) {\n    const arr = (html + '').split('`');\n    let result = '';\n    arr.forEach((seg, index) => {\n      if (index % 2 === 0) {\n        result += seg;\n      } else {\n        result += '<i>' + seg + '</i>';\n      }\n    });\n    return result;\n  }\n\n  /**\n   * check if the currrent user has the privilige: premium:user:featurereport\n   */\n  public isUserCanPrintFeatureReport() {\n    const privileges = this.getUser().privileges || [];\n    const checkValues = ['premium:user:featurereport'];\n    return privileges.filter((elem) => {\n      return checkValues.indexOf(elem) > -1;\n    }).length === checkValues.length;\n  }\n\n  /**\n   * set the svg cache\n   * @param obj \n   */\n  public setSvgCache(key: any, svgStr: string) {\n    if (!key || !svgStr) {\n      return;\n    }\n    this.svgCache[key] = svgStr;\n  }\n   /**\n   * get svg cache\n   * @param key \n   * @returns \n   */\n   public getSvgCache(key?: string) {\n    if (!key) {\n      return this.svgCache;\n    }\n    if (!this.svgCache) {\n      return null;\n    }\n    return this.svgCache[key];\n  }\n\n  /**\n  * compare version\n  * -1: a < b\n  * 0: a = b\n  * 1: a > b\n  * @param a\n  * @param b\n  */\n   private compareVersion(a: string, b: string): number {\n   /**\n    * convert version to string\n    * the versoin may be number in very old survey\n    */\n   a = '' + a;\n   b = '' + b;\n \n   if (!a || !b) {\n     throw new Error('version is not existed');\n   }\n \n   let i, diff;\n   const regExStrip0 = /(\\.0+)+$/;\n   const segmentsA = a.replace(regExStrip0, '').split('.');\n   const segmentsB = b.replace(regExStrip0, '').split('.');\n   const l = Math.min(segmentsA.length, segmentsB.length);\n \n   for (i = 0; i < l; i++) {\n     diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);\n     if (diff) {\n       return diff;\n     }\n   }\n   return segmentsA.length - segmentsB.length;\n }\n\n\n  /**\n   * get rest api version by portalVersion\n   * portal    rest version\n   * 10.7   >> 6.4\n   * 10.6   >> 5.3\n   * 10.5.2 >> 5.2\n   * 10.5.1 >> 5.1\n   * 10.5.0 >> 4.4\n   * 10.4.0 >> 3.10\n   */\n  private getRestApiVersion(portalVersion: string): string {\n    if (!portalVersion) {\n      return '';\n    }\n\n    if (portalVersion === '10.9.1') {\n      return '9.2';\n    }\n\n    if (portalVersion === '10.9.0') {\n      return '8.4';\n    }\n\n    if (portalVersion === '10.8.1') {\n      return '8.2';\n    }\n    if (portalVersion === '10.8.0') {\n      return '7.3';\n    }\n\n    if (portalVersion === '10.7.2') {\n      return '7.2';\n    }\n    if (portalVersion === '10.7.1') {\n      return '7.1';\n    }\n    /**\n     * portal mistype the version of 10.7.0 to 7.1\n     * it will be difficult to distingish 10.7.0 and 10.7.1\n     */\n    if (portalVersion === '10.7.0') {\n      return '7.1'; // '6.4';\n    }\n    if (portalVersion === '10.6.1') {\n      return '6.1';\n    }\n    if (portalVersion === '10.6.0') {\n      return '5.3';\n    }\n    if (portalVersion === '10.5.2') {\n      return '5.2';\n    }\n    if (portalVersion === '10.5.1') {\n      return '5.1';\n    }\n    if (portalVersion === '10.5.0') {\n      return '4.4';\n    }\n    if (portalVersion === '10.4.0') {\n      return '3.10';\n    }\n    return '';\n  }\n\n}"],"version":3}