{"file":"report-icon2.js","mappings":";;;AAAA,MAAM,aAAa,GAAG,sBAAsB,CAAC;AAC7C,yBAAe,aAAa;;MCOf,UAAU;;;;;;;;;IAOrB,iBAAiB;QACf,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG;YACxB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;SACrB,CAAC,CAAA;KACH;IAED,SAAS;QACP,MAAM,KAAK,GAAgB,WAAW,CAAC,UAAU,EAAE,CAAC;QACpD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;aAC3B,IAAI,CAAC;YACJ,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAChC,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrC;YACD,OAAO,KAAK,CAAC,YAAY,CAAC,kBAAkB,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC;iBAC1D,IAAI,CAAC,CAAC,IAAI;gBACT,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;oBACZ,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;iBACjD;gBACD,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;aACpB,CAAC,CAAA;SACH,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG;YACV,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YAClC,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC1C,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC;YACpB,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1D,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aAC5D;YACD,OAAO,GAAG,CAAC,SAAS,CAAC;SACtB,CAAC,CAAA;KACL;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACH,0DAAG,SAAS,EAAE,IAAI,CAAC,QAAQ,GACvB,EACJ,8DAAa,CACR,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/ui/report-icon/report-icon.scss?tag=report-icon&encapsulation=shadow","src/components/ui/report-icon/report-icon.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, h, getAssetPath, Prop, State } from '@stencil/core';\nimport { UtilService } from '../../../services/util.service';\n\n@Component({\n  tag: 'report-icon',\n  styleUrl: 'report-icon.scss',\n  shadow: true,\n})\nexport class ReportIcon {\n\n  @Prop() icon: any;\n  @Prop() size: any;\n\n  @State() pathData: any;\n\n  componentWillLoad() {\n    this.fetchIcon().then((res) => {\n      this.pathData = res;\n    })\n  }\n\n  fetchIcon() {\n    const utils: UtilService = UtilService.getService();\n    return Promise.resolve(true)\n    .then(() => {\n      if (utils.getSvgCache(this.icon)) {\n        return utils.getSvgCache(this.icon);\n      } \n      return fetch(getAssetPath(`./assets/icons/${this.icon}.svg`))\n        .then((resp) => {\n          if (!resp.ok) {\n            throw new Error(\"could not get the icon file:\");\n          }\n          return resp.text();\n        })\n      }).then((str) => {\n        utils.setSvgCache(this.icon, str);\n        const div = document.createElement('div');\n        div.innerHTML = str;\n        if (this.size) {\n          div.querySelector('svg').setAttribute('width', this.size);\n          div.querySelector('svg').setAttribute('height', this.size);\n        }\n        return div.innerHTML;\n      })\n  }\n\n  render() {\n    return (\n      <Host>\n        <i innerHTML={this.pathData} >\n        </i>\n        <slot></slot>\n      </Host>\n    );\n  }\n\n}\n"],"version":3}