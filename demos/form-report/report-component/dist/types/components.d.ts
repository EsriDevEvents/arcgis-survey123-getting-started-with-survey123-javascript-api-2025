/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface CreditEstimator {
    }
    interface DetailTable {
        "job": any;
    }
    interface ErrorDetailModal {
        "job": any;
        "open": boolean;
    }
    interface FeatureReport {
        "apiUrl"?: string;
        "clientId": string;
        "featureLayerUrl": string;
        "hide": string;
        "inputFeatureTemplate": string;
        "label": string;
        "locale"?: string;
        "mapScale": string;
        "mergeFiles": 'none' | 'nextPage' | 'continuous';
        "outputFormat": string;
        "outputPackageName": string;
        "outputReportName": string;
        "packageFiles": boolean | string;
        "portalUrl"?: string;
        "queryParameters": string;
        "reportTemplateIds": string;
        "requestSource": string;
        /**
          * ui parameters
         */
        "show": string;
        "surveyItemId"?: string;
        "templateItemId"?: string;
        "token": string;
        "uploadInfo": string;
        "utcOffset"?: string;
        "webmapItemId": string;
    }
    interface FeaturesPreview {
        /**
          * Defines how a feature displays in the “Input feature” section.  Use {<fieldName>} to refer to a specific attribute of the feature like in MapViewer.  For example, {countryName}, population: {pop2000} -> “China, population: 1,411,750,000”.
         */
        "inputFeatureTemplate"?: string;
        "queryParameters"?: string;
    }
    interface FileOptionChooser {
        "fileOption": 'none' | 'nextPage' | 'continuous';
    }
    interface ReportBase {
        "f"?: string;
        "featureLayerUrl": string;
        "locale"?: string;
        "portalUrl"?: string;
        "surveyItemId"?: string;
        "token": string;
        "url"?: string;
        "username"?: string;
    }
    interface ReportGenerator {
        "langObj": any;
        "templateItemId": string;
        "visibleConf": any;
    }
    interface ReportIcon {
        "icon": any;
        "size": any;
    }
    interface ReportSettings {
        "conflictBehavior": 'rename' | 'replace' | 'fail';
        "fileName": string;
        "mergeFiles": 'none' | 'nextPage' | 'continuous';
        "outputFormat": string;
        "visibleElems": string[];
    }
    interface SampleReportGenerator {
    }
    interface SuccessDetailModal {
        "job": any;
        "open": boolean;
    }
    interface TaskInfo {
        "detailedStatus": string;
        "detailedStatusEle": string;
        "job": any;
        "showDetail": string;
    }
    interface TaskList {
        "jobs": any[];
    }
    interface TemplateChooser {
        "langObj": any;
        "selectedTemplateId": any;
        "templateIds": string;
    }
    interface ViewReportLink {
        "checkingList": string[];
    }
}
export interface FeatureReportCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFeatureReportElement;
}
export interface FileOptionChooserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFileOptionChooserElement;
}
export interface ReportGeneratorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLReportGeneratorElement;
}
export interface ReportSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLReportSettingsElement;
}
export interface TaskInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaskInfoElement;
}
export interface TaskListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaskListElement;
}
export interface TemplateChooserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTemplateChooserElement;
}
export interface ViewReportLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLViewReportLinkElement;
}
declare global {
    interface HTMLCreditEstimatorElement extends Components.CreditEstimator, HTMLStencilElement {
    }
    var HTMLCreditEstimatorElement: {
        prototype: HTMLCreditEstimatorElement;
        new (): HTMLCreditEstimatorElement;
    };
    interface HTMLDetailTableElement extends Components.DetailTable, HTMLStencilElement {
    }
    var HTMLDetailTableElement: {
        prototype: HTMLDetailTableElement;
        new (): HTMLDetailTableElement;
    };
    interface HTMLErrorDetailModalElement extends Components.ErrorDetailModal, HTMLStencilElement {
    }
    var HTMLErrorDetailModalElement: {
        prototype: HTMLErrorDetailModalElement;
        new (): HTMLErrorDetailModalElement;
    };
    interface HTMLFeatureReportElementEventMap {
        "userInfoGetted": any;
        "i18nStringUpdated": any;
        "_credentialGetted": any;
    }
    interface HTMLFeatureReportElement extends Components.FeatureReport, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFeatureReportElementEventMap>(type: K, listener: (this: HTMLFeatureReportElement, ev: FeatureReportCustomEvent<HTMLFeatureReportElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFeatureReportElementEventMap>(type: K, listener: (this: HTMLFeatureReportElement, ev: FeatureReportCustomEvent<HTMLFeatureReportElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFeatureReportElement: {
        prototype: HTMLFeatureReportElement;
        new (): HTMLFeatureReportElement;
    };
    interface HTMLFeaturesPreviewElement extends Components.FeaturesPreview, HTMLStencilElement {
    }
    var HTMLFeaturesPreviewElement: {
        prototype: HTMLFeaturesPreviewElement;
        new (): HTMLFeaturesPreviewElement;
    };
    interface HTMLFileOptionChooserElementEventMap {
        "fileOptionChange": any;
    }
    interface HTMLFileOptionChooserElement extends Components.FileOptionChooser, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFileOptionChooserElementEventMap>(type: K, listener: (this: HTMLFileOptionChooserElement, ev: FileOptionChooserCustomEvent<HTMLFileOptionChooserElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFileOptionChooserElementEventMap>(type: K, listener: (this: HTMLFileOptionChooserElement, ev: FileOptionChooserCustomEvent<HTMLFileOptionChooserElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFileOptionChooserElement: {
        prototype: HTMLFileOptionChooserElement;
        new (): HTMLFileOptionChooserElement;
    };
    interface HTMLReportBaseElement extends Components.ReportBase, HTMLStencilElement {
    }
    var HTMLReportBaseElement: {
        prototype: HTMLReportBaseElement;
        new (): HTMLReportBaseElement;
    };
    interface HTMLReportGeneratorElementEventMap {
        "reportCreated": any;
    }
    interface HTMLReportGeneratorElement extends Components.ReportGenerator, HTMLStencilElement {
        addEventListener<K extends keyof HTMLReportGeneratorElementEventMap>(type: K, listener: (this: HTMLReportGeneratorElement, ev: ReportGeneratorCustomEvent<HTMLReportGeneratorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLReportGeneratorElementEventMap>(type: K, listener: (this: HTMLReportGeneratorElement, ev: ReportGeneratorCustomEvent<HTMLReportGeneratorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLReportGeneratorElement: {
        prototype: HTMLReportGeneratorElement;
        new (): HTMLReportGeneratorElement;
    };
    interface HTMLReportIconElement extends Components.ReportIcon, HTMLStencilElement {
    }
    var HTMLReportIconElement: {
        prototype: HTMLReportIconElement;
        new (): HTMLReportIconElement;
    };
    interface HTMLReportSettingsElementEventMap {
        "fileOptionChange": any;
        "fileNameChange": any;
        "selectedFolderChange": any;
        "selectedFileFormatChange": any;
    }
    interface HTMLReportSettingsElement extends Components.ReportSettings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLReportSettingsElementEventMap>(type: K, listener: (this: HTMLReportSettingsElement, ev: ReportSettingsCustomEvent<HTMLReportSettingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLReportSettingsElementEventMap>(type: K, listener: (this: HTMLReportSettingsElement, ev: ReportSettingsCustomEvent<HTMLReportSettingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLReportSettingsElement: {
        prototype: HTMLReportSettingsElement;
        new (): HTMLReportSettingsElement;
    };
    interface HTMLSampleReportGeneratorElement extends Components.SampleReportGenerator, HTMLStencilElement {
    }
    var HTMLSampleReportGeneratorElement: {
        prototype: HTMLSampleReportGeneratorElement;
        new (): HTMLSampleReportGeneratorElement;
    };
    interface HTMLSuccessDetailModalElement extends Components.SuccessDetailModal, HTMLStencilElement {
    }
    var HTMLSuccessDetailModalElement: {
        prototype: HTMLSuccessDetailModalElement;
        new (): HTMLSuccessDetailModalElement;
    };
    interface HTMLTaskInfoElementEventMap {
        "jobRemoved": any;
    }
    interface HTMLTaskInfoElement extends Components.TaskInfo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTaskInfoElementEventMap>(type: K, listener: (this: HTMLTaskInfoElement, ev: TaskInfoCustomEvent<HTMLTaskInfoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTaskInfoElementEventMap>(type: K, listener: (this: HTMLTaskInfoElement, ev: TaskInfoCustomEvent<HTMLTaskInfoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTaskInfoElement: {
        prototype: HTMLTaskInfoElement;
        new (): HTMLTaskInfoElement;
    };
    interface HTMLTaskListElementEventMap {
        "goBackClicked": any;
    }
    interface HTMLTaskListElement extends Components.TaskList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTaskListElementEventMap>(type: K, listener: (this: HTMLTaskListElement, ev: TaskListCustomEvent<HTMLTaskListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTaskListElementEventMap>(type: K, listener: (this: HTMLTaskListElement, ev: TaskListCustomEvent<HTMLTaskListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTaskListElement: {
        prototype: HTMLTaskListElement;
        new (): HTMLTaskListElement;
    };
    interface HTMLTemplateChooserElementEventMap {
        "selectedTemplateChange": any;
    }
    interface HTMLTemplateChooserElement extends Components.TemplateChooser, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTemplateChooserElementEventMap>(type: K, listener: (this: HTMLTemplateChooserElement, ev: TemplateChooserCustomEvent<HTMLTemplateChooserElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTemplateChooserElementEventMap>(type: K, listener: (this: HTMLTemplateChooserElement, ev: TemplateChooserCustomEvent<HTMLTemplateChooserElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTemplateChooserElement: {
        prototype: HTMLTemplateChooserElement;
        new (): HTMLTemplateChooserElement;
    };
    interface HTMLViewReportLinkElementEventMap {
        "viewReportLinkClicked": any;
    }
    interface HTMLViewReportLinkElement extends Components.ViewReportLink, HTMLStencilElement {
        addEventListener<K extends keyof HTMLViewReportLinkElementEventMap>(type: K, listener: (this: HTMLViewReportLinkElement, ev: ViewReportLinkCustomEvent<HTMLViewReportLinkElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLViewReportLinkElementEventMap>(type: K, listener: (this: HTMLViewReportLinkElement, ev: ViewReportLinkCustomEvent<HTMLViewReportLinkElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLViewReportLinkElement: {
        prototype: HTMLViewReportLinkElement;
        new (): HTMLViewReportLinkElement;
    };
    interface HTMLElementTagNameMap {
        "credit-estimator": HTMLCreditEstimatorElement;
        "detail-table": HTMLDetailTableElement;
        "error-detail-modal": HTMLErrorDetailModalElement;
        "feature-report": HTMLFeatureReportElement;
        "features-preview": HTMLFeaturesPreviewElement;
        "file-option-chooser": HTMLFileOptionChooserElement;
        "report-base": HTMLReportBaseElement;
        "report-generator": HTMLReportGeneratorElement;
        "report-icon": HTMLReportIconElement;
        "report-settings": HTMLReportSettingsElement;
        "sample-report-generator": HTMLSampleReportGeneratorElement;
        "success-detail-modal": HTMLSuccessDetailModalElement;
        "task-info": HTMLTaskInfoElement;
        "task-list": HTMLTaskListElement;
        "template-chooser": HTMLTemplateChooserElement;
        "view-report-link": HTMLViewReportLinkElement;
    }
}
declare namespace LocalJSX {
    interface CreditEstimator {
    }
    interface DetailTable {
        "job"?: any;
    }
    interface ErrorDetailModal {
        "job"?: any;
        "open"?: boolean;
    }
    interface FeatureReport {
        "apiUrl"?: string;
        "clientId"?: string;
        "featureLayerUrl": string;
        "hide"?: string;
        "inputFeatureTemplate"?: string;
        "label"?: string;
        "locale"?: string;
        "mapScale"?: string;
        "mergeFiles"?: 'none' | 'nextPage' | 'continuous';
        "onI18nStringUpdated"?: (event: FeatureReportCustomEvent<any>) => void;
        "onUserInfoGetted"?: (event: FeatureReportCustomEvent<any>) => void;
        "on_credentialGetted"?: (event: FeatureReportCustomEvent<any>) => void;
        "outputFormat"?: string;
        "outputPackageName"?: string;
        "outputReportName"?: string;
        "packageFiles"?: boolean | string;
        "portalUrl"?: string;
        "queryParameters": string;
        "reportTemplateIds"?: string;
        "requestSource"?: string;
        /**
          * ui parameters
         */
        "show"?: string;
        "surveyItemId"?: string;
        "templateItemId"?: string;
        "token": string;
        "uploadInfo"?: string;
        "utcOffset"?: string;
        "webmapItemId"?: string;
    }
    interface FeaturesPreview {
        /**
          * Defines how a feature displays in the “Input feature” section.  Use {<fieldName>} to refer to a specific attribute of the feature like in MapViewer.  For example, {countryName}, population: {pop2000} -> “China, population: 1,411,750,000”.
         */
        "inputFeatureTemplate"?: string;
        "queryParameters"?: string;
    }
    interface FileOptionChooser {
        "fileOption"?: 'none' | 'nextPage' | 'continuous';
        "onFileOptionChange"?: (event: FileOptionChooserCustomEvent<any>) => void;
    }
    interface ReportBase {
        "f"?: string;
        "featureLayerUrl": string;
        "locale"?: string;
        "portalUrl"?: string;
        "surveyItemId"?: string;
        "token": string;
        "url"?: string;
        "username"?: string;
    }
    interface ReportGenerator {
        "langObj"?: any;
        "onReportCreated"?: (event: ReportGeneratorCustomEvent<any>) => void;
        "templateItemId"?: string;
        "visibleConf"?: any;
    }
    interface ReportIcon {
        "icon"?: any;
        "size"?: any;
    }
    interface ReportSettings {
        "conflictBehavior"?: 'rename' | 'replace' | 'fail';
        "fileName"?: string;
        "mergeFiles"?: 'none' | 'nextPage' | 'continuous';
        "onFileNameChange"?: (event: ReportSettingsCustomEvent<any>) => void;
        "onFileOptionChange"?: (event: ReportSettingsCustomEvent<any>) => void;
        "onSelectedFileFormatChange"?: (event: ReportSettingsCustomEvent<any>) => void;
        "onSelectedFolderChange"?: (event: ReportSettingsCustomEvent<any>) => void;
        "outputFormat"?: string;
        "visibleElems"?: string[];
    }
    interface SampleReportGenerator {
    }
    interface SuccessDetailModal {
        "job"?: any;
        "open"?: boolean;
    }
    interface TaskInfo {
        "detailedStatus"?: string;
        "detailedStatusEle"?: string;
        "job"?: any;
        "onJobRemoved"?: (event: TaskInfoCustomEvent<any>) => void;
        "showDetail"?: string;
    }
    interface TaskList {
        "jobs"?: any[];
        "onGoBackClicked"?: (event: TaskListCustomEvent<any>) => void;
    }
    interface TemplateChooser {
        "langObj"?: any;
        "onSelectedTemplateChange"?: (event: TemplateChooserCustomEvent<any>) => void;
        "selectedTemplateId"?: any;
        "templateIds"?: string;
    }
    interface ViewReportLink {
        "checkingList"?: string[];
        "onViewReportLinkClicked"?: (event: ViewReportLinkCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "credit-estimator": CreditEstimator;
        "detail-table": DetailTable;
        "error-detail-modal": ErrorDetailModal;
        "feature-report": FeatureReport;
        "features-preview": FeaturesPreview;
        "file-option-chooser": FileOptionChooser;
        "report-base": ReportBase;
        "report-generator": ReportGenerator;
        "report-icon": ReportIcon;
        "report-settings": ReportSettings;
        "sample-report-generator": SampleReportGenerator;
        "success-detail-modal": SuccessDetailModal;
        "task-info": TaskInfo;
        "task-list": TaskList;
        "template-chooser": TemplateChooser;
        "view-report-link": ViewReportLink;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "credit-estimator": LocalJSX.CreditEstimator & JSXBase.HTMLAttributes<HTMLCreditEstimatorElement>;
            "detail-table": LocalJSX.DetailTable & JSXBase.HTMLAttributes<HTMLDetailTableElement>;
            "error-detail-modal": LocalJSX.ErrorDetailModal & JSXBase.HTMLAttributes<HTMLErrorDetailModalElement>;
            "feature-report": LocalJSX.FeatureReport & JSXBase.HTMLAttributes<HTMLFeatureReportElement>;
            "features-preview": LocalJSX.FeaturesPreview & JSXBase.HTMLAttributes<HTMLFeaturesPreviewElement>;
            "file-option-chooser": LocalJSX.FileOptionChooser & JSXBase.HTMLAttributes<HTMLFileOptionChooserElement>;
            "report-base": LocalJSX.ReportBase & JSXBase.HTMLAttributes<HTMLReportBaseElement>;
            "report-generator": LocalJSX.ReportGenerator & JSXBase.HTMLAttributes<HTMLReportGeneratorElement>;
            "report-icon": LocalJSX.ReportIcon & JSXBase.HTMLAttributes<HTMLReportIconElement>;
            "report-settings": LocalJSX.ReportSettings & JSXBase.HTMLAttributes<HTMLReportSettingsElement>;
            "sample-report-generator": LocalJSX.SampleReportGenerator & JSXBase.HTMLAttributes<HTMLSampleReportGeneratorElement>;
            "success-detail-modal": LocalJSX.SuccessDetailModal & JSXBase.HTMLAttributes<HTMLSuccessDetailModalElement>;
            "task-info": LocalJSX.TaskInfo & JSXBase.HTMLAttributes<HTMLTaskInfoElement>;
            "task-list": LocalJSX.TaskList & JSXBase.HTMLAttributes<HTMLTaskListElement>;
            "template-chooser": LocalJSX.TemplateChooser & JSXBase.HTMLAttributes<HTMLTemplateChooserElement>;
            "view-report-link": LocalJSX.ViewReportLink & JSXBase.HTMLAttributes<HTMLViewReportLinkElement>;
        }
    }
}
