{"version":3,"file":"state.service.js","sourceRoot":"","sources":["../../src/services/state.service.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B;;;GAGG;AACH,MAAM,OAAO,YAAY;IACvB;;OAEG;IACI,MAAM,CAAC,UAAU;QACtB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC3B,YAAY,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAC7C,CAAC;QACD,OAAO,YAAY,CAAC,QAAQ,CAAC;IAC/B,CAAC;IASD;;OAEG;IACH;QAPQ,UAAK,GAAG,IAAI,OAAO,EAAO,CAAC;QAC3B,iBAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;QACzC,mBAAc,GAAqB,IAAI,GAAG,EAAe,CAAC;QAMhE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;OAKG;IACI,iBAAiB,CAAC,KAAa,EAAE,OAGvC;QACC,UAAU;QACV,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YACtB,KAAK,EAAE,IAAI;YACX,oBAAoB,EAAE,KAAK;SAC5B,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;QAElB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,OAAO,CAAC,oBAAoB,IAAI,OAAO,KAAK,OAAO,CAAC,KAAK,EAAE,CAAC;YAC9D,OAAO;QACT,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACd,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;SACxB,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,uBAAuB,CAAC,IAAY,EAAE,OAG5C;QACC,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,GAAQ,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;YAC7C,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACpB,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBACf,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;oBACjC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC3C,CAAC;gBACD,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,CAAC;QACH,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,SAAS,CAAC,KAAa,EAAE,QAAa;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACzD,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAE5C,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,IAAI,KAAK,EAAE,CAAC;YACV,SAAS,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;QAC9B,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,YAAiB;QAClC,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO;QACT,CAAC;QACD,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE,CAAC;YACjC,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC;gBAC9D,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;oBAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;oBACzD,MAAM,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;oBACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC5C,IAAI,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;4BAChC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC3B,CAAC;oBACH,CAAC;oBACD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;oBAE5C;;;uBAGG;oBACH,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBAC7B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACpC,CAAC;gBACH,CAAC;gBACD,OAAO;YACT,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM;IACN,2GAA2G;IAC3G,yCAAyC;IACzC,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB,MAAM;IACN,mEAAmE;IACnE,qBAAqB;IACrB,qBAAqB;IACrB,MAAM;IACN,uEAAuE;IACvE,qBAAqB;IACrB,MAAM;IACN,mCAAmC;IACnC,cAAc;IACd,MAAM;IACN,+DAA+D;IAC/D,IAAI;IAEJ,MAAM;IACN,kEAAkE;IAClE,sBAAsB;IACtB,MAAM;IACN,iDAAiD;IACjD,oFAAoF;IACpF,cAAc;IACd,MAAM;IACN,UAAU;IACV,wCAAwC;IACxC,oCAAoC;IACpC,yCAAyC;IACzC,QAAQ;IACR,qBAAqB;IACrB,kBAAkB;IAClB,gDAAgD;IAChD,MAAM;IACN,IAAI;IAEI,QAAQ,CAAC,IAAS;QACxB,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;QACjE,WAAW,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC/B,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["/**\n * StateService\n * components can call notifyDataChanged to brodcast event, call subscribe function to register event\n */\nimport { Subject } from 'rxjs';\n/**\n * StateService\n * hook event and trigger callback\n */\nexport class StateService {\n  /**\n   * static variable\n   */\n  public static getService() {\n    if (!StateService.instance) {\n      StateService.instance = new StateService();\n    }\n    return StateService.instance;\n  }\n  /**\n   * private variables\n   */\n  private static instance: StateService;\n  private _data = new Subject<any>();\n  private _dataStream$ = this._data.asObservable();\n  private _subscriptions: Map<string, any> = new Map<string, any>();\n\n  /**\n   * constructor\n   */\n  private constructor() {\n    this._dataStream$.subscribe((data) => this._onEvent(data));\n  }\n\n  /**\n   * notifyDataChanged\n   * @param event \n   * @param value \n   * @param ignoreSameValueEvent \n   */\n  public notifyDataChanged(event: string, options?: {\n    value?: any;\n    ignoreSameValueEvent?: boolean;\n  }) {\n    // options\n    options = Object.assign({\n      value: null,\n      ignoreSameValueEvent: false\n    }, options || {});\n\n    const current = this._data[event];\n    if (options.ignoreSameValueEvent && current !== options.value) {\n      return;\n    }\n    this._data[event] = options.value;\n    this._data.next({\n      event: event,\n      data: this._data[event]\n    });\n  }\n\n  /**\n   * notifyDataChangedByName\n   * @param name \n   * @param value \n   * @param ignoreSameValueEvent \n   */\n  public notifyDataChangedByName(name: string, options?: {\n    value?: any;\n    ignoreSameValueEvent?: boolean;\n  }) {\n    if (this._subscriptions.size > 0) {\n      const keys: any = this._subscriptions.keys();\n      let k = keys.next();\n      while (!k.done) {\n        if (k.value.indexOf(name) !== -1) {\n          this.notifyDataChanged(k.value, options);\n        }\n        k = keys.next();\n      }\n    }\n  }\n\n  /**\n   * subscribe\n   * @param event \n   * @param callback \n   */\n  public subscribe(event: string, callback: any) {\n    const subscribers = this._subscriptions.get(event) || [];\n    subscribers.push(callback);\n    this._subscriptions.set(event, subscribers);\n\n    const returnObj = {};\n    if (event) {\n      returnObj[event] = callback;\n    }\n    return returnObj;\n  }\n\n  /**\n   * delete the subscribe, suggest to call this method when component destroy\n   * @param subscribeObj \n   */\n  public unSubscribe(subscribeObj: any) {\n    if (!subscribeObj) {\n      return;\n    }\n    for (const event in subscribeObj) {\n      if (Object.prototype.hasOwnProperty.call(subscribeObj, event)) {\n        if (event && event.length) {\n          const subscribers = this._subscriptions.get(event) || [];\n          const callback = subscribeObj[event];\n          for (let i = 0; i < subscribers.length; i++) {\n            if (callback === subscribers[i]) {\n              subscribers.splice(i, 1);\n            }\n          }\n          this._subscriptions.set(event, subscribers);\n\n          /**\n           * if there is no subscribers\n           * delete event in _subscriptions\n           */\n          if (subscribers.length === 0) {\n            this._subscriptions.delete(event);\n          }\n        }\n        return;\n      }\n    }\n  }\n\n  // /**\n  //  * Tool: add register a subscribe event to a given group(object), usually, this is usefull to manage all\n  //  * subscribe listeners in a component \n  //  * @param group \n  //  * @param eventName \n  //  * @param callback \n  //  */\n  // public addSubscribeToGroup(groupObj: any, eventName, callback) {\n  //   if (!groupObj) {\n  //     groupObj = {};\n  //   }\n  //   if (!(groupObj instanceof Object && !(Array.isArray(groupObj)))) {\n  //     groupObj = {};\n  //   }\n  //   if (!eventName || !callback) {\n  //     return;\n  //   }\n  //   groupObj[eventName] = this.subscribe(eventName, callback);\n  // }\n\n  // /**\n  //  * Tool: remove all the subscribes which are in a group(object)\n  //  * @param groupObj \n  //  */\n  // public clearSubscribesInGroup(groupObj: any) {\n  //   if (!groupObj || !(groupObj instanceof Object && !(Array.isArray(groupObj)))) {\n  //     return;\n  //   }\n  //   try {\n  //     // tslint:disable-next-line:forin\n  //     for (const key in groupObj) {\n  //       this.unSubscribe(groupObj[key]);\n  //     }\n  //     groupObj = {};\n  //   } catch (e) {\n  //     console.log('un-subscribe event error.');\n  //   }\n  // }\n\n  private _onEvent(data: any) {\n    const subscribers = this._subscriptions.get(data['event']) || [];\n    subscribers.forEach((callback) => {\n      callback.call(null, data['data']);\n    });\n  }\n}\n"]}